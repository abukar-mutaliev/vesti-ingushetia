// src/shared/lib/timeUtils.js

export class MoscowTimeUtils {
    static MOSCOW_TIMEZONE = 'Europe/Moscow';
    static MOSCOW_OFFSET_HOURS = 3; // UTC+3

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç datetime-local –≤ UTC –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     * @param {string} localDateTime - —Å—Ç—Ä–æ–∫–∞ –∏–∑ input datetime-local
     * @returns {string} ISO —Å—Ç—Ä–æ–∫–∞ –≤ UTC –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
     */
    static toServerTime(localDateTime) {
        if (!localDateTime) return null;

        console.log('üïê [CLIENT] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞:');
        console.log(`   –í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${localDateTime}`);

        // –°–æ–∑–¥–∞—ë–º –¥–∞—Ç—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        const inputDate = new Date(localDateTime);
        console.log(`   –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: ${inputDate.toString()}`);

        // –ü–æ–ª—É—á–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤)
        const browserOffsetMinutes = inputDate.getTimezoneOffset();
        console.log(`   –°–º–µ—â–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞: ${browserOffsetMinutes} –º–∏–Ω—É—Ç`);

        // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: UTC+3 = -180 –º–∏–Ω—É—Ç
        const moscowOffsetMinutes = -3 * 60;

        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º –±—Ä–∞—É–∑–µ—Ä–∞
        const offsetDifference = moscowOffsetMinutes - (-browserOffsetMinutes);
        console.log(`   –†–∞–∑–Ω–∏—Ü–∞ —Å–º–µ—â–µ–Ω–∏–π: ${offsetDifference} –º–∏–Ω—É—Ç`);

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        const correctedDate = new Date(inputDate.getTime() + (offsetDifference * 60 * 1000));
        const isoString = correctedDate.toISOString();

        console.log(`   –í—Ä–µ–º—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ (UTC): ${isoString}`);
        console.log(`   –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: ${this.formatMoscowTime(correctedDate)}`);

        return isoString;
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç UTC –≤—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è input datetime-local
     * @param {string} serverDateTime - UTC –≤—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {string} —Å—Ç—Ä–æ–∫–∞ –¥–ª—è input datetime-local
     */
    static fromServerTime(serverDateTime) {
        if (!serverDateTime) return '';

        console.log('üïê [CLIENT] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:');
        console.log(`   –í—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞ (UTC): ${serverDateTime}`);

        // –°–æ–∑–¥–∞—ë–º –¥–∞—Ç—É –∏–∑ UTC –≤—Ä–µ–º–µ–Ω–∏
        const utcDate = new Date(serverDateTime);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è input datetime-local
        const localISOString = new Date(utcDate.getTime() - (utcDate.getTimezoneOffset() * 60000))
            .toISOString()
            .slice(0, 16);

        console.log(`   –î–ª—è input datetime-local: ${localISOString}`);
        console.log(`   –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: ${this.formatMoscowTime(utcDate)}`);

        return localISOString;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
     * @param {string|Date} dateString - –¥–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {object} options - –æ–ø—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
     */
    static formatMoscowTime(dateString, options = {}) {
        if (!dateString) return '';

        const defaultOptions = {
            timeZone: this.MOSCOW_TIMEZONE,
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            ...options
        };

        return new Date(dateString).toLocaleString('ru-RU', defaultOptions);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è input datetime-local (—Ç–µ–∫—É—â–µ–µ + 5 –º–∏–Ω—É—Ç –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
     * @returns {string} –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è input
     */
    static getMinDateTime() {
        const now = new Date();
        // –î–æ–±–∞–≤–ª—è–µ–º 5 –º–∏–Ω—É—Ç –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
        now.setMinutes(now.getMinutes() + 5);

        // –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        const moscowTime = new Date(now.toLocaleString("en-US", {timeZone: this.MOSCOW_TIMEZONE}));

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è input datetime-local
        return moscowTime.toISOString().slice(0, 16);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
     * @param {string} dateString - –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} true –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
     */
    static isFutureDate(dateString) {
        if (!dateString) return false;

        const inputDate = new Date(dateString);
        const nowInMoscow = new Date(new Date().toLocaleString("en-US", {timeZone: this.MOSCOW_TIMEZONE}));

        return inputDate > nowInMoscow;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @returns {string} —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
     */
    static now() {
        return this.formatMoscowTime(new Date());
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {string} dateString - –¥–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –∫—Ä–∞—Ç–∫–∞—è –¥–∞—Ç–∞
     */
    static formatShort(dateString) {
        return this.formatMoscowTime(dateString, {
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {string} dateString - –¥–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞
     */
    static formatFull(dateString) {
        return this.formatMoscowTime(dateString, {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} dateString - –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    static validateScheduleDate(dateString) {
        if (!dateString) {
            return { valid: false, error: '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞' };
        }

        try {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) {
                return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã' };
            }

            const now = new Date();
            const minFutureTime = new Date(now.getTime() + 60 * 1000); // +1 –º–∏–Ω—É—Ç–∞

            if (date <= minFutureTime) {
                return {
                    valid: false,
                    error: '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É –≤ –±—É–¥—É—â–µ–º',
                    current: this.formatMoscowTime(now),
                    entered: this.formatMoscowTime(date)
                };
            }

            const maxFutureTime = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000); // +1 –≥–æ–¥
            if (date > maxFutureTime) {
                return {
                    valid: false,
                    error: '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —á–µ–º —á–µ—Ä–µ–∑ –≥–æ–¥'
                };
            }

            return {
                valid: true,
                moscowTime: this.formatMoscowTime(date)
            };
        } catch (error) {
            return {
                valid: false,
                error: `–û—à–∏–±–∫–∞: ${error.message}`
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥")
     * @param {string} dateString - –¥–∞—Ç–∞
     * @returns {string} –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
     */
    static getRelativeTime(dateString) {
        if (!dateString) return '';

        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now.getTime() - date.getTime();
        const diffMinutes = Math.floor(diffMs / (1000 * 60));
        const diffHours = Math.floor(diffMinutes / 60);
        const diffDays = Math.floor(diffHours / 24);

        if (diffMinutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (diffMinutes < 60) return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
        if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;

        return this.formatMoscowTime(dateString, {
            month: 'short',
            day: 'numeric'
        });
    }
}

export default MoscowTimeUtils;

export const formatMoscowTime = MoscowTimeUtils.formatMoscowTime.bind(MoscowTimeUtils);
export const toServerTime = MoscowTimeUtils.toServerTime.bind(MoscowTimeUtils);
export const fromServerTime = MoscowTimeUtils.fromServerTime.bind(MoscowTimeUtils);