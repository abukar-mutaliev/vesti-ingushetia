
export class MoscowTimeUtils {
    static MOSCOW_TIMEZONE = 'Europe/Moscow';
    static MOSCOW_OFFSET_HOURS = 3; // UTC+3

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç datetime-local –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
     * @param {string} localDateTime - —Å—Ç—Ä–æ–∫–∞ –∏–∑ input datetime-local
     * @returns {string} ISO —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
     */
    static toServerTime(localDateTime) {
        if (!localDateTime) return null;

        console.log('üïê [CLIENT] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞:');
        console.log(`   –í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${localDateTime}`);

        try {
            // –ï—Å–ª–∏ —ç—Ç–æ datetime-local —Ñ–æ—Ä–º–∞—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—É–Ω–¥—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            let normalizedDateTime = localDateTime;
            if (localDateTime.includes('T') && !localDateTime.includes(':00', localDateTime.lastIndexOf(':'))) {
                if (localDateTime.split('T')[1].split(':').length === 2) {
                    normalizedDateTime += ':00';
                }
            }

            // –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
            const moscowTime = new Date(normalizedDateTime + '+03:00');

            if (isNaN(moscowTime.getTime())) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');
            }

            const utcTime = moscowTime.toISOString();

            console.log(`   –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: ${this.formatMoscowTime(moscowTime)}`);
            console.log(`   UTC –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞: ${utcTime}`);

            return utcTime;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:', error);
            return null;
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç UTC –≤—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è datetime-local input
     * @param {string} serverDateTime - UTC –≤—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {string} —Å—Ç—Ä–æ–∫–∞ –¥–ª—è input datetime-local
     */
    static fromServerTime(serverDateTime) {
        if (!serverDateTime) return '';

        console.log('üïê [CLIENT] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:');
        console.log(`   UTC —Å —Å–µ—Ä–≤–µ—Ä–∞: ${serverDateTime}`);

        try {
            const utcDate = new Date(serverDateTime);

            if (isNaN(utcDate.getTime())) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
            }

            // –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            const moscowTime = new Date(utcDate.toLocaleString("en-US", {timeZone: this.MOSCOW_TIMEZONE}));

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è datetime-local input
            const year = moscowTime.getFullYear();
            const month = String(moscowTime.getMonth() + 1).padStart(2, '0');
            const day = String(moscowTime.getDate()).padStart(2, '0');
            const hours = String(moscowTime.getHours()).padStart(2, '0');
            const minutes = String(moscowTime.getMinutes()).padStart(2, '0');

            const localString = `${year}-${month}-${day}T${hours}:${minutes}`;

            console.log(`   –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: ${this.formatMoscowTime(utcDate)}`);
            console.log(`   –î–ª—è input: ${localString}`);

            return localString;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', error);
            return '';
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
     * @param {string|Date} dateString - –¥–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {object} options - –æ–ø—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
     */
    static formatMoscowTime(dateString, options = {}) {
        if (!dateString) return '';

        try {
            const defaultOptions = {
                timeZone: this.MOSCOW_TIMEZONE,
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                ...options
            };

            return new Date(dateString).toLocaleString('ru-RU', defaultOptions);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:', error);
            return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è datetime-local (—Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ + 5 –º–∏–Ω—É—Ç)
     * @returns {string} –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è input
     */
    static getMinDateTime() {
        try {
            const now = new Date();
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            const moscowNow = new Date(now.toLocaleString("en-US", {timeZone: this.MOSCOW_TIMEZONE}));

            // –î–æ–±–∞–≤–ª—è–µ–º 5 –º–∏–Ω—É—Ç
            moscowNow.setMinutes(moscowNow.getMinutes() + 5);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è datetime-local
            const year = moscowNow.getFullYear();
            const month = String(moscowNow.getMonth() + 1).padStart(2, '0');
            const day = String(moscowNow.getDate()).padStart(2, '0');
            const hours = String(moscowNow.getHours()).padStart(2, '0');
            const minutes = String(moscowNow.getMinutes()).padStart(2, '0');

            return `${year}-${month}-${day}T${hours}:${minutes}`;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:', error);
            // Fallback
            const now = new Date();
            now.setMinutes(now.getMinutes() + 5);
            return now.toISOString().slice(0, 16);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º (–≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
     * @param {string} dateString - –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} true –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
     */
    static isFutureDate(dateString) {
        if (!dateString) return false;

        try {
            const inputDate = new Date(dateString + '+03:00'); // –°—á–∏—Ç–∞–µ–º –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            const nowMoscow = new Date(new Date().toLocaleString("en-US", {timeZone: this.MOSCOW_TIMEZONE}));

            return inputDate > nowMoscow;
        } catch (error) {
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @returns {string} —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
     */
    static now() {
        return this.formatMoscowTime(new Date());
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {string|Date} dateString - –¥–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –∫—Ä–∞—Ç–∫–∞—è –¥–∞—Ç–∞
     */
    static formatShort(dateString) {
        return this.formatMoscowTime(dateString, {
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     * @param {string|Date} dateString - –¥–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     * @returns {string} –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞
     */
    static formatFull(dateString) {
        return this.formatMoscowTime(dateString, {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     * @param {string} dateString - –¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {object} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    static validateScheduleDate(dateString) {
        if (!dateString) {
            return { valid: false, error: '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞' };
        }

        try {
            // –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            const moscowDate = new Date(dateString + '+03:00');

            if (isNaN(moscowDate.getTime())) {
                return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã' };
            }

            const nowMoscow = new Date(new Date().toLocaleString("en-US", {timeZone: this.MOSCOW_TIMEZONE}));
            const minFutureTime = new Date(nowMoscow.getTime() + 60 * 1000); // +1 –º–∏–Ω—É—Ç–∞

            if (moscowDate <= minFutureTime) {
                return {
                    valid: false,
                    error: '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É –≤ –±—É–¥—É—â–µ–º',
                    current: this.formatMoscowTime(nowMoscow),
                    entered: this.formatMoscowTime(moscowDate)
                };
            }

            const maxFutureTime = new Date(nowMoscow.getTime() + 365 * 24 * 60 * 60 * 1000); // +1 –≥–æ–¥
            if (moscowDate > maxFutureTime) {
                return {
                    valid: false,
                    error: '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —á–µ–º —á–µ—Ä–µ–∑ –≥–æ–¥'
                };
            }

            return {
                valid: true,
                moscowTime: this.formatMoscowTime(moscowDate)
            };
        } catch (error) {
            return {
                valid: false,
                error: `–û—à–∏–±–∫–∞: ${error.message}`
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥")
     * @param {string|Date} dateString - –¥–∞—Ç–∞
     * @returns {string} –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
     */
    static getRelativeTime(dateString) {
        if (!dateString) return '';

        try {
            const date = new Date(dateString);
            const now = new Date();
            const diffMs = now.getTime() - date.getTime();
            const diffMinutes = Math.floor(diffMs / (1000 * 60));
            const diffHours = Math.floor(diffMinutes / 60);
            const diffDays = Math.floor(diffHours / 24);

            if (diffMinutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
            if (diffMinutes < 60) return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
            if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
            if (diffDays < 7) return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;

            return this.formatMoscowTime(dateString, {
                month: 'short',
                day: 'numeric'
            });
        } catch (error) {
            return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }

    /**
     * –ù–û–í–´–ô: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º
     * @param {string} clientTime - –≤—Ä–µ–º—è —Å –∫–ª–∏–µ–Ω—Ç–∞
     * @param {string} serverTime - –≤—Ä–µ–º—è —Å —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {object} –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    static checkTimeSync(clientTime, serverTime) {
        try {
            const client = new Date(clientTime);
            const server = new Date(serverTime);

            const diffMs = Math.abs(client.getTime() - server.getTime());
            const diffMinutes = Math.floor(diffMs / (1000 * 60));

            return {
                inSync: diffMinutes < 2, // –°—á–∏—Ç–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ < 2 –º–∏–Ω—É—Ç
                difference: diffMinutes,
                clientMoscow: this.formatMoscowTime(client),
                serverMoscow: this.formatMoscowTime(server)
            };
        } catch (error) {
            return {
                inSync: false,
                error: error.message
            };
        }
    }

    /**
     * –ù–û–í–´–ô: –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
     * @param {string} label - –º–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     * @param {string|Date} date - –¥–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
     * @returns {object} –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
     */
    static debugTime(label, date = new Date()) {
        const dateObj = new Date(date);

        const info = {
            label,
            input: date,
            utc: dateObj.toISOString(),
            moscow: this.formatMoscowTime(dateObj),
            local: dateObj.toString(),
            timestamp: dateObj.getTime(),
            userTimezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
            userOffset: dateObj.getTimezoneOffset()
        };

        console.group(`üïê ${label}`);
        console.table(info);
        console.groupEnd();

        return info;
    }
}

export default MoscowTimeUtils;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã
export const formatMoscowTime = MoscowTimeUtils.formatMoscowTime.bind(MoscowTimeUtils);
export const toServerTime = MoscowTimeUtils.toServerTime.bind(MoscowTimeUtils);
export const fromServerTime = MoscowTimeUtils.fromServerTime.bind(MoscowTimeUtils);
export const validateScheduleDate = MoscowTimeUtils.validateScheduleDate.bind(MoscowTimeUtils);
export const getMinDateTime = MoscowTimeUtils.getMinDateTime.bind(MoscowTimeUtils);
export const debugTime = MoscowTimeUtils.debugTime.bind(MoscowTimeUtils);