const cron = require('node-cron');
const { News, Category, Media, sequelize, ScheduledNews } = require('../models');
const path = require('path');
const fs = require('fs');
const logger = require('../logger');

function validateVideoUrl(url) {
    if (!url || typeof url !== 'string') return false;

    const rutubeRegex = /^https?:\/\/(?:www\.)?rutube\.ru\/video\/[A-Za-z0-9_-]+\/?$/;
    const youtubeRegex = /^https?:\/\/(?:www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)[A-Za-z0-9_-]+/;

    return rutubeRegex.test(url) || youtubeRegex.test(url);
}

class NewsScheduler {
    constructor() {
        this.isRunning = false;
        this.initScheduler();
        this.initCleanup();
    }

    initScheduler() {
        cron.schedule('* * * * *', () => {
            this.checkAndPublishScheduledNews();
        });

    }

    async checkAndPublishScheduledNews() {
        if (this.isRunning) {
            return;
        }

        this.isRunning = true;

        try {
            await sequelize.authenticate();

            const now = new Date();

            const scheduledNews = await ScheduledNews.findAll({
                where: {
                    scheduledDate: {
                        [require('sequelize').Op.lte]: now
                    },
                    status: 'scheduled'
                }
            });


            if (scheduledNews.length === 0) {
                const allScheduled = await ScheduledNews.findAll({
                    where: { status: 'scheduled' }
                });

                if (allScheduled.length > 0) {
                    allScheduled.forEach(news => {
                        logger.info(`   - "${news.title}" –Ω–∞ ${news.scheduledDate.toISOString()}`);
                    });
                }

                this.isRunning = false;
                return;
            }


            for (const scheduled of scheduledNews) {
                try {
                    logger.info(`üì∞ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏: "${scheduled.title}"`);
                    await this.publishScheduledNews(scheduled);
                } catch (error) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ ID ${scheduled.id}:`, error);

                    await scheduled.update({
                        status: 'error',
                        errorMessage: error.message,
                        lastAttempt: now
                    });
                }
            }
        } catch (error) {
            logger.error('üí• –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
        } finally {
            this.isRunning = false;
        }
    }

    async publishScheduledNews(scheduledNewsItem) {
        const transaction = await sequelize.transaction();

        try {
            const newsData = JSON.parse(scheduledNewsItem.newsData);
            const publishTime = new Date(scheduledNewsItem.scheduledDate);

            console.log('üì∞ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏:', newsData.title);

            const news = await News.create({
                title: newsData.title,
                content: newsData.content,
                authorId: newsData.authorId,
                publishDate: publishTime,
            }, { transaction });

            console.log(`‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${news.id}`);

            if (newsData.categoryIds && newsData.categoryIds.length > 0) {
                const categories = await Category.findAll({
                    where: { id: newsData.categoryIds },
                    transaction
                });

                if (categories.length > 0) {
                    await news.addCategories(categories, { transaction });
                    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
                } else {
                    logger.warn(`‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å ID [${newsData.categoryIds.join(', ')}] –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                }
            }

            const mediaInstances = [];

            if (newsData.videoUrl && newsData.videoUrl.trim() !== '' && validateVideoUrl(newsData.videoUrl.trim())) {
                const videoMedia = await Media.create({
                    url: newsData.videoUrl.trim(),
                    type: 'video'
                }, { transaction });
                mediaInstances.push(videoMedia);
                console.log(`‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${newsData.videoUrl.trim()} (ID: ${videoMedia.id})`);
            }

            if (newsData.mediaFiles && newsData.mediaFiles.length > 0) {
                console.log(`üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${newsData.mediaFiles.length} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);

                for (const [index, mediaFile] of newsData.mediaFiles.entries()) {
                    try {
                        if (mediaFile.type === 'image') {
                            console.log(`üì∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}:`, {
                                filename: mediaFile.filename,
                                originalName: mediaFile.originalName,
                                path: mediaFile.path,
                                url: mediaFile.url,
                                fallback: mediaFile.fallback,
                                placeholder: mediaFile.placeholder,
                                scheduled: mediaFile.scheduled
                            });

                            let finalImageUrl = null;

                            // –í–∞—Ä–∏–∞–Ω—Ç 1: –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π URL –∏ —ç—Ç–æ fallback
                            if (mediaFile.fallback && mediaFile.url) {
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
                                const expectedPath = path.join(__dirname, '../../uploads/images', path.basename(mediaFile.url));
                                if (fs.existsSync(expectedPath)) {
                                    finalImageUrl = mediaFile.url;
                                    console.log(`   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback URL: ${finalImageUrl}`);
                                } else {
                                    console.warn(`   ‚ö†Ô∏è Fallback —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${expectedPath}`);
                                }
                            }
                            // –í–∞—Ä–∏–∞–Ω—Ç 2: –ï—Å–ª–∏ –µ—Å—Ç—å –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
                            else if (mediaFile.path && mediaFile.scheduled && fs.existsSync(mediaFile.path)) {
                                const tempPath = mediaFile.path;

                                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                                let finalFilename;
                                if (mediaFile.filename && mediaFile.filename.startsWith('scheduled-')) {
                                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è –∫–∞–∫ –æ—Å–Ω–æ–≤—É
                                    const timestamp = Date.now();
                                    const randomSuffix = Math.round(Math.random() * 1E9);
                                    const extension = path.extname(mediaFile.originalName || mediaFile.filename);
                                    finalFilename = `images-${timestamp}-${randomSuffix}${extension}`;
                                } else if (mediaFile.filename) {
                                    finalFilename = mediaFile.filename;
                                } else {
                                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
                                    const timestamp = Date.now();
                                    const randomSuffix = Math.round(Math.random() * 1E9);
                                    const extension = path.extname(mediaFile.originalName || '');
                                    finalFilename = `images-${timestamp}-${randomSuffix}${extension}`;
                                }

                                // –ü—É—Ç—å –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
                                const uploadsDir = path.join(__dirname, '../../uploads/images');
                                if (!fs.existsSync(uploadsDir)) {
                                    fs.mkdirSync(uploadsDir, { recursive: true });
                                }

                                let finalPath = path.join(uploadsDir, finalFilename);

                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                                let counter = 1;
                                while (fs.existsSync(finalPath)) {
                                    const fileExt = path.extname(finalFilename);
                                    const baseName = path.basename(finalFilename, fileExt);
                                    const uniqueFilename = `${baseName}-${counter}${fileExt}`;
                                    finalPath = path.join(uploadsDir, uniqueFilename);
                                    finalFilename = uniqueFilename;
                                    counter++;
                                }

                                // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é
                                try {
                                    fs.copyFileSync(tempPath, finalPath);
                                    
                                    if (fs.existsSync(finalPath)) {
                                        finalImageUrl = `uploads/images/${finalFilename}`;
                                        console.log(`   ‚úÖ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ uploads: ${finalFilename}`);
                                    } else {
                                        console.error(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${finalPath}`);
                                        finalImageUrl = null;
                                    }
                                } catch (copyError) {
                                    console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:`, copyError);
                                    finalImageUrl = null;
                                }

                                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                                if (finalImageUrl) {
                                    try {
                                        fs.unlinkSync(tempPath);
                                        console.log(`   üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${tempPath}`);
                                    } catch (err) {
                                        console.warn(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempPath}`, err.message);
                                    }
                                }
                            }
                            // –í–∞—Ä–∏–∞–Ω—Ç 2.5: –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ temp –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∏–º–µ–Ω–∞–º
                            else if (mediaFile.filename && mediaFile.scheduled) {
                                console.log(`   üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ temp –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –∏–º–µ–Ω–∞–º –¥–ª—è: ${mediaFile.filename}`);
                                
                                const tempDir = path.join(__dirname, '../temp');
                                if (fs.existsSync(tempDir)) {
                                    const tempFiles = fs.readdirSync(tempDir);
                                    
                                    // –ò—â–µ–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                                    const originalFilename = mediaFile.filename;
                                    const matchingFile = tempFiles.find(file => 
                                        file.includes(originalFilename) || 
                                        originalFilename.includes(file) ||
                                        file.includes(path.basename(originalFilename, path.extname(originalFilename)))
                                    );
                                    
                                    if (matchingFile) {
                                        const tempPath = path.join(tempDir, matchingFile);
                                        console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –≤ temp: ${matchingFile}`);
                                        
                                        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                                        const timestamp = Date.now();
                                        const randomSuffix = Math.round(Math.random() * 1E9);
                                        const extension = path.extname(mediaFile.originalName || mediaFile.filename);
                                        const finalFilename = `images-${timestamp}-${randomSuffix}${extension}`;

                                        // –ü—É—Ç—å –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ
                                        const uploadsDir = path.join(__dirname, '../../uploads/images');
                                        if (!fs.existsSync(uploadsDir)) {
                                            fs.mkdirSync(uploadsDir, { recursive: true });
                                        }

                                        let finalPath = path.join(uploadsDir, finalFilename);

                                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                                        let counter = 1;
                                        while (fs.existsSync(finalPath)) {
                                            const fileExt = path.extname(finalFilename);
                                            const baseName = path.basename(finalFilename, fileExt);
                                            const uniqueFilename = `${baseName}-${counter}${fileExt}`;
                                            finalPath = path.join(uploadsDir, uniqueFilename);
                                            finalFilename = uniqueFilename;
                                            counter++;
                                        }

                                        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é
                                        try {
                                            fs.copyFileSync(tempPath, finalPath);
                                            
                                            if (fs.existsSync(finalPath)) {
                                                finalImageUrl = `uploads/images/${finalFilename}`;
                                                console.log(`   ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: ${finalFilename}`);
                                            } else {
                                                console.error(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${finalPath}`);
                                                finalImageUrl = null;
                                            }
                                        } catch (copyError) {
                                            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:`, copyError);
                                            finalImageUrl = null;
                                        }

                                        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                                        if (finalImageUrl) {
                                            try {
                                                fs.unlinkSync(tempPath);
                                                console.log(`   üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${tempPath}`);
                                            } catch (err) {
                                                console.warn(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${tempPath}`, err.message);
                                            }
                                        }
                                    } else {
                                        console.warn(`   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –≤ temp –¥–ª—è: ${mediaFile.filename}`);
                                        console.log(`   üìÅ –§–∞–π–ª—ã –≤ temp: ${tempFiles.join(', ')}`);
                                    }
                                }
                            }
                            // –í–∞—Ä–∏–∞–Ω—Ç 3: –§–∞–π–ª –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ –≤ –ø–∞–ø–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                            else if (mediaFile.filename && !mediaFile.placeholder) {
                                const imagePath = path.join(__dirname, '../../uploads/images', mediaFile.filename);
                                if (fs.existsSync(imagePath)) {
                                    finalImageUrl = `uploads/images/${mediaFile.filename}`;
                                    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤ uploads: ${finalImageUrl}`);
                                } else {
                                    console.warn(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${imagePath}`);
                                }
                            }

                            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª
                            if (!finalImageUrl && mediaFile.originalName) {
                                console.log(`   üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –ø–æ originalName: ${mediaFile.originalName}`);
                                
                                // –ü–æ–∏—Å–∫ –ø–æ originalName –≤ uploads
                                const originalPath = path.join(__dirname, '../../uploads/images', mediaFile.originalName);
                                if (fs.existsSync(originalPath)) {
                                    finalImageUrl = `uploads/images/${mediaFile.originalName}`;
                                    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø–æ originalName: ${finalImageUrl}`);
                                } else {
                                    // –ü–æ–∏—Å–∫ –ø–æ originalPath –µ—Å–ª–∏ –µ—Å—Ç—å
                                    if (mediaFile.originalPath && fs.existsSync(mediaFile.originalPath)) {
                                        // –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                                        const timestamp = Date.now();
                                        const randomSuffix = Math.round(Math.random() * 1E9);
                                        const extension = path.extname(mediaFile.originalName);
                                        const recoveredFilename = `recovered-${timestamp}-${randomSuffix}${extension}`;
                                        
                                        const uploadsDir = path.join(__dirname, '../../uploads/images');
                                        if (!fs.existsSync(uploadsDir)) {
                                            fs.mkdirSync(uploadsDir, { recursive: true });
                                        }
                                        
                                        const recoveredPath = path.join(uploadsDir, recoveredFilename);
                                        
                                        try {
                                            fs.copyFileSync(mediaFile.originalPath, recoveredPath);
                                            finalImageUrl = `uploads/images/${recoveredFilename}`;
                                            console.log(`   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª –∏–∑ originalPath: ${finalImageUrl}`);
                                        } catch (copyError) {
                                            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:`, copyError);
                                        }
                                    } else {
                                        console.warn(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –≤—Å–µ–º –ø—É—Ç—è–º –¥–ª—è originalName: ${mediaFile.originalName}`);
                                    }
                                }
                            }

                            if (finalImageUrl) {
                                const imageMedia = await Media.create({
                                    url: finalImageUrl,
                                    type: 'image'
                                }, { transaction });

                                mediaInstances.push(imageMedia);
                                console.log(`   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: ${finalImageUrl} (ID: ${imageMedia.id})`);
                            } else {
                                console.error(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${JSON.stringify(mediaFile)}`);
                            }

                        } else if (mediaFile.type === 'video' && mediaFile.url) {
                            const videoUrl = mediaFile.url.trim();
                            const existingVideo = mediaInstances.find(m => m.type === 'video' && m.url === videoUrl);

                            if (!existingVideo && validateVideoUrl(videoUrl)) {
                                const videoMedia = await Media.create({
                                    url: videoUrl,
                                    type: 'video'
                                }, { transaction });
                                mediaInstances.push(videoMedia);
                                logger.info(`‚úÖ –í–∏–¥–µ–æ –∏–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${videoUrl} (ID: ${videoMedia.id})`);
                            }
                        }
                    } catch (error) {
                        logger.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ ${index + 1}:`, error);
                    }
                }
            }

            if (mediaInstances.length > 0) {
                await news.addMediaFiles(mediaInstances, { transaction });
                console.log(`‚úÖ –°–≤—è–∑–∞–Ω–æ ${mediaInstances.length} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤`);
            } else {
                logger.info(`‚ÑπÔ∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
            }

            await transaction.commit();

            // –£–¥–∞–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            await scheduledNewsItem.destroy();

            logger.info(`‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å "${newsData.title}" —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞`, {
                newsId: news.id,
                originalScheduledDate: scheduledNewsItem.scheduledDate,
                actualPublishDate: news.publishDate,
                createdAt: news.createdAt,
                mediaFilesCount: mediaInstances.length
            });

            return news;

        } catch (error) {
            await transaction.rollback();
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏:`, error);
            throw error;
        }
    }

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ scheduleNews –≤ newsScheduler.js

    async scheduleNews(newsData, scheduledDate, authorId) {
        try {
            console.log('üóìÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:', {
                title: newsData.title,
                authorId,
                scheduledDateRaw: scheduledDate,
                scheduledDateISO: new Date(scheduledDate).toISOString(),
                scheduledDateMoscow: new Date(scheduledDate).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })
            });

            const processedNewsData = { ...newsData };

            if (newsData.videoUrl && newsData.videoUrl.trim() !== '') {
                processedNewsData.videoUrl = newsData.videoUrl.trim();
            } else {
                processedNewsData.videoUrl = null;
                logger.info(`‚ÑπÔ∏è –í–∏–¥–µ–æ URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
            if (newsData.mediaFiles && newsData.mediaFiles.length > 0) {
                console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${newsData.mediaFiles.length} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞`);

                const tempDir = path.join(__dirname, '../temp');
                if (!fs.existsSync(tempDir)) {
                    fs.mkdirSync(tempDir, { recursive: true });
                    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: ${tempDir}`);
                }

                processedNewsData.mediaFiles = await Promise.all(
                    newsData.mediaFiles.map(async (file, index) => {
                        console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª ${index + 1}:`, {
                            type: file.type,
                            filename: file.filename,
                            originalname: file.originalname,
                            path: file.path
                        });

                        if (file.type === 'image') {
                            const timestamp = Date.now();
                            const randomSuffix = Math.round(Math.random() * 1E9);
                            const originalExt = path.extname(file.originalname || file.filename || '');
                            const tempFilename = `scheduled-${timestamp}-${randomSuffix}${originalExt}`;
                            const tempPath = path.join(tempDir, tempFilename);

                            let sourcePath = null;

                            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∞–π–ª–∞
                            if (file.path && fs.existsSync(file.path)) {
                                sourcePath = file.path;
                                console.log(`   üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫: —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É—Ç—å ${sourcePath}`);
                            } else if (file.filename) {
                                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –ø–∞–ø–∫–µ uploads
                                const uploadsPath = path.join(__dirname, '../../uploads/images', file.filename);
                                if (fs.existsSync(uploadsPath)) {
                                    sourcePath = uploadsPath;
                                    console.log(`   üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫: uploads –ø–∞–ø–∫–∞ ${sourcePath}`);
                                } else {
                                    console.warn(`   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ uploads: ${uploadsPath}`);
                                }
                            }

                            if (sourcePath) {
                                try {
                                    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                                    fs.copyFileSync(sourcePath, tempPath);
                                    console.log(`   ‚úÖ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: ${tempPath}`);

                                    return {
                                        type: 'image',
                                        filename: tempFilename, // –ù–æ–≤–æ–µ –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
                                        originalName: file.originalname || file.filename,
                                        path: tempPath, // –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
                                        originalPath: sourcePath, // –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
                                        scheduled: true // –ú–∞—Ä–∫–µ—Ä —á—Ç–æ —Ñ–∞–π–ª –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
                                    };
                                } catch (copyError) {
                                    console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:`, copyError);

                                    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–π fallback - –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ uploads
                                    try {
                                        const uploadsDir = path.join(__dirname, '../../uploads/images');
                                        if (!fs.existsSync(uploadsDir)) {
                                            fs.mkdirSync(uploadsDir, { recursive: true });
                                        }

                                        const fallbackFilename = `fallback-${timestamp}-${randomSuffix}${originalExt}`;
                                        const fallbackPath = path.join(uploadsDir, fallbackFilename);
                                        
                                        fs.copyFileSync(sourcePath, fallbackPath);
                                        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω fallback —Ñ–∞–π–ª: ${fallbackPath}`);

                                        return {
                                            type: 'image',
                                            filename: fallbackFilename,
                                            originalName: file.originalname || file.filename,
                                            url: `uploads/images/${fallbackFilename}`,
                                            fallback: true
                                        };
                                    } catch (fallbackError) {
                                        console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback —Ñ–∞–π–ª–∞:`, fallbackError);
                                        
                                        // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                                        return {
                                            type: 'image',
                                            filename: file.filename,
                                            originalName: file.originalname,
                                            url: `uploads/images/${file.filename}`,
                                            fallback: true,
                                            error: '–§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
                                        };
                                    }
                                }
                            } else {
                                console.warn(`   ‚ö†Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º placeholder`);

                                // –°–æ–∑–¥–∞–µ–º placeholder –∑–∞–ø–∏—Å—å
                                return {
                                    type: 'image',
                                    filename: file.filename || tempFilename,
                                    originalName: file.originalname || 'unknown',
                                    placeholder: true,
                                    url: `uploads/images/${file.filename || tempFilename}`
                                };
                            }
                        }

                        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ (–≤–∏–¥–µ–æ –∏ —Ç.–¥.)
                        return file;
                    })
                );

                const successfulFiles = processedNewsData.mediaFiles.filter(f => !f.placeholder && !f.error);
                const fallbackFiles = processedNewsData.mediaFiles.filter(f => f.fallback);
                const placeholderFiles = processedNewsData.mediaFiles.filter(f => f.placeholder);
                const errorFiles = processedNewsData.mediaFiles.filter(f => f.error);

                console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${successfulFiles.length}`);
                if (fallbackFiles.length > 0) {
                    console.warn(`‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–æ fallback —Ñ–∞–π–ª–æ–≤: ${fallbackFiles.length}`);
                }
                if (placeholderFiles.length > 0) {
                    console.warn(`‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–æ placeholder —Ñ–∞–π–ª–æ–≤: ${placeholderFiles.length}`);
                }
                if (errorFiles.length > 0) {
                    console.error(`‚ùå –§–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: ${errorFiles.length}`);
                }
            } else {
                processedNewsData.mediaFiles = [];
                console.log(`‚ÑπÔ∏è –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
            }

            processedNewsData.authorId = authorId;

            const finalScheduledDate = new Date(scheduledDate);
            if (isNaN(finalScheduledDate.getTime())) {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
            }

            const now = new Date();
            const minAllowedTime = new Date(now.getTime() + 30 * 1000);

            if (finalScheduledDate <= minAllowedTime) {
                console.log('‚ùå –î–∞—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–º:');
                console.log(`   –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: ${finalScheduledDate.toISOString()}`);
                console.log(`   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toISOString()}`);
                throw new Error('–î–∞—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
            }

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
            const scheduled = await ScheduledNews.create({
                title: newsData.title,
                scheduledDate: finalScheduledDate,
                newsData: JSON.stringify(processedNewsData),
                authorId: authorId,
                status: 'scheduled'
            });

            logger.info(`‚úÖ –ù–æ–≤–æ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞:`, {
                id: scheduled.id,
                title: newsData.title,
                scheduledDateUTC: finalScheduledDate.toISOString(),
                scheduledDateMoscow: finalScheduledDate.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' }),
                authorId,
                timeUntilPublication: Math.round((finalScheduledDate.getTime() - now.getTime()) / 1000 / 60),
                mediaFilesCount: processedNewsData.mediaFiles.length
            });

            return scheduled;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏:', error);
            throw error;
        }
    }

    async getScheduledNews(authorId = null) {
        try {
            const where = { status: 'scheduled' };
            if (authorId) {
                where.authorId = authorId;
            }

            return await ScheduledNews.findAll({
                where,
                order: [['scheduledDate', 'ASC']]
            });
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
            throw error;
        }
    }



    initCleanup() {
        cron.schedule('0 2 * * *', () => {
            this.cleanupTempFiles();
        });

        cron.schedule('0 3 * * *', () => {
            this.cleanupOrphanedFiles();
        });
    }


    async cleanupOrphanedFiles() {
        try {

            const uploadsDir = path.join(__dirname, '../../uploads/images');
            if (!fs.existsSync(uploadsDir)) {
                return;
            }

            const files = fs.readdirSync(uploadsDir);

            const mediaUrls = await Media.findAll({
                where: { type: 'image' },
                attributes: ['url']
            });

            const usedFilenames = mediaUrls.map(media => path.basename(media.url));

            let deletedCount = 0;
            let skippedCount = 0;

            for (const file of files) {
                if (!usedFilenames.includes(file)) {
                    const filePath = path.join(uploadsDir, file);
                    try {
                        await fs.promises.unlink(filePath);
                        deletedCount++;
                    } catch (error) {
                        logger.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, error);
                    }
                } else {
                    skippedCount++;
                }
            }

            logger.info(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ: ${deletedCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
        }
    }
    // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å NewsScheduler

// –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ
    async cleanupScheduledNewsFiles(scheduledNewsId) {
        try {
            const scheduledNews = await ScheduledNews.findByPk(scheduledNewsId);
            if (!scheduledNews) return;

            const newsData = JSON.parse(scheduledNews.newsData);
            if (newsData.mediaFiles && newsData.mediaFiles.length > 0) {
                console.log(`üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ ID: ${scheduledNewsId}`);

                newsData.mediaFiles.forEach(file => {
                    if (file.path && file.scheduled && fs.existsSync(file.path)) {
                        try {
                            fs.unlinkSync(file.path);
                            console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${file.path}`);
                        } catch (err) {
                            console.error(`   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file.path}:`, err.message);
                        }
                    }
                });
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏:', error);
        }
    }

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ—Ç–º–µ–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏
    async cancelScheduledNews(id, authorId) {
        try {
            const scheduled = await ScheduledNews.findOne({
                where: {
                    id,
                    authorId,
                    status: 'scheduled'
                }
            });

            if (!scheduled) {
                throw new Error('–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            await this.cleanupScheduledNewsFiles(id);

            await scheduled.destroy();

            logger.info(`‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞: ${scheduled.title} (ID: ${id})`);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏:', error);
            throw error;
        }
    }

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    async cleanupTempFiles() {
        try {
            const tempDir = path.join(__dirname, '../temp');
            if (!fs.existsSync(tempDir)) return;

            const files = fs.readdirSync(tempDir);
            const now = Date.now();
            const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
            let deletedCount = 0;

            console.log(`üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: –Ω–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`);

            for (const file of files) {
                const filePath = path.join(tempDir, file);

                try {
                    const stats = fs.statSync(filePath);
                    const fileAge = now - stats.mtime.getTime();

                    if (fileAge > maxAge) {
                        fs.unlinkSync(filePath);
                        deletedCount++;
                        console.log(`   üóëÔ∏è –£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª: ${file}
                         (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.round(fileAge / 1000 / 60 / 60)} —á–∞—Å–æ–≤)`);
                    }
                } catch (err) {
                    console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file}:`, err.message);
                }
            }

            if (deletedCount > 0) {
                logger.info(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ: ${deletedCount}`);
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
        }
    }

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    async checkScheduledNewsIntegrity() {
        try {
            const scheduledNews = await ScheduledNews.findAll({
                where: { status: 'scheduled' }
            });

            console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ ${scheduledNews.length} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π`);

            for (const news of scheduledNews) {
                try {
                    const newsData = JSON.parse(news.newsData);
                    if (newsData.mediaFiles && newsData.mediaFiles.length > 0) {
                        let missingFiles = 0;

                        newsData.mediaFiles.forEach(file => {
                            if (file.path && file.scheduled && !fs.existsSync(file.path)) {
                                missingFiles++;
                                console.warn(`   ‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ "${news.title}": ${file.path}`);
                            }
                        });

                        if (missingFiles > 0) {
                            logger.warn(`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ ID ${news.id}: ${missingFiles} —Ñ–∞–π–ª–æ–≤`);
                        }
                    }
                } catch (err) {
                    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ ID ${news.id}:`, err.message);
                }
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
        }
    }
}

const newsScheduler = new NewsScheduler();

module.exports = newsScheduler;