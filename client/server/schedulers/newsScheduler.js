const cron = require('node-cron');
const { News, Category, Media, sequelize, ScheduledNews } = require('../models');
const path = require('path');
const fs = require('fs');
const logger = require('../logger');

class NewsScheduler {
    constructor() {
        this.isRunning = false;
        this.initScheduler();
        this.initCleanup();
        logger.info('NewsScheduler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    initScheduler() {
        cron.schedule('* * * * *', () => {
            this.checkAndPublishScheduledNews();
        });

        logger.info('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É');
    }

    async checkAndPublishScheduledNews() {
        if (this.isRunning) {
            logger.info('–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é');
            return;
        }

        this.isRunning = true;
        logger.info('üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...');

        try {
            await sequelize.authenticate();
            logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —É—Å–ø–µ—à–Ω–æ');
            
            const now = new Date();
            logger.info(`‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toISOString()}`);

            const scheduledNews = await ScheduledNews.findAll({
                where: {
                    scheduledDate: {
                        [require('sequelize').Op.lte]: now
                    },
                    status: 'scheduled'
                }
            });

            logger.info(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${scheduledNews.length}`);

            if (scheduledNews.length === 0) {
                // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                const allScheduled = await ScheduledNews.findAll({
                    where: { status: 'scheduled' }
                });
                logger.info(`üìù –í—Å–µ–≥–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: ${allScheduled.length}`);
                
                if (allScheduled.length > 0) {
                    allScheduled.forEach(news => {
                        logger.info(`   - "${news.title}" –Ω–∞ ${news.scheduledDate.toISOString()}`);
                    });
                }
                
                this.isRunning = false;
                return;
            }

            logger.info(`üöÄ –ù–∞–π–¥–µ–Ω–æ ${scheduledNews.length} –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);

            for (const scheduled of scheduledNews) {
                try {
                    logger.info(`üì∞ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏: "${scheduled.title}"`);
                    await this.publishScheduledNews(scheduled);
                } catch (error) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏ ID ${scheduled.id}:`, error);

                    await scheduled.update({
                        status: 'error',
                        errorMessage: error.message,
                        lastAttempt: now
                    });
                }
            }
        } catch (error) {
            logger.error('üí• –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
        } finally {
            this.isRunning = false;
            logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        }
    }

    async publishScheduledNews(scheduledNewsItem) {
        const transaction = await sequelize.transaction();

        try {
            const newsData = JSON.parse(scheduledNewsItem.newsData);

            const news = await News.create({
                title: newsData.title,
                content: newsData.content,
                authorId: newsData.authorId,
                publishDate: newsData.publishDate || new Date()
            }, { transaction });

            if (newsData.categoryIds && newsData.categoryIds.length > 0) {
                const categories = await Category.findAll({
                    where: { id: newsData.categoryIds },
                    transaction
                });
                await news.addCategories(categories, { transaction });
            }

            if (newsData.mediaFiles && newsData.mediaFiles.length > 0) {
                const mediaInstances = [];

                for (const mediaFile of newsData.mediaFiles) {
                    if (mediaFile.type === 'video' && mediaFile.url) {
                        const media = await Media.create({
                            url: mediaFile.url,
                            type: 'video'
                        }, { transaction });
                        mediaInstances.push(media);
                    } else if (mediaFile.type === 'image') {
                        if (mediaFile.url) {
                            // –§–∞–π–ª —É–∂–µ –∏–º–µ–µ—Ç –≥–æ—Ç–æ–≤—ã–π URL
                            const media = await Media.create({
                                url: mediaFile.url,
                                type: 'image'
                            }, { transaction });
                            mediaInstances.push(media);
                        } else if (mediaFile.path && mediaFile.filename) {
                            // –§–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å
                            const tempPath = path.join(__dirname, '../temp', mediaFile.filename);
                            const finalPath = path.join(__dirname, '../uploads/images', mediaFile.filename);

                            if (fs.existsSync(tempPath)) {
                                // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ uploads/images —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                                const uploadsDir = path.join(__dirname, '../uploads/images');
                                if (!fs.existsSync(uploadsDir)) {
                                    fs.mkdirSync(uploadsDir, { recursive: true });
                                }

                                fs.renameSync(tempPath, finalPath);

                                const media = await Media.create({
                                    url: `uploads/images/${mediaFile.filename}`,
                                    type: 'image'
                                }, { transaction });
                                mediaInstances.push(media);
                            } else {
                                logger.warn(`–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${tempPath}`);
                            }
                        }
                    }
                }

                if (mediaInstances.length > 0) {
                    await news.addMediaFiles(mediaInstances, { transaction });
                }
            }

            await transaction.commit();

            await scheduledNewsItem.destroy();

            logger.info(`–£—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å: "${newsData.title}"`);

        } catch (error) {
            await transaction.rollback();
            throw error;
        }
    }

    async scheduleNews(newsData, scheduledDate, authorId) {
        try {
            const processedNewsData = { ...newsData };

            if (newsData.mediaFiles) {
                const tempDir = path.join(__dirname, '../temp');
                if (!fs.existsSync(tempDir)) {
                    fs.mkdirSync(tempDir, { recursive: true });
                }

                processedNewsData.mediaFiles = await Promise.all(
                    newsData.mediaFiles.map(async (file) => {
                        if (file.type === 'image') {
                            const tempFilename = `${Date.now()}-${file.filename}`;
                            const tempPath = path.join(tempDir, tempFilename);

                            const sourcePath = file.path || path.join(__dirname, '../uploads/images', file.filename);
                            
                            if (fs.existsSync(sourcePath)) {
                                fs.copyFileSync(sourcePath, tempPath);
                            } else {
                                logger.warn(`–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sourcePath}`);
                                return {
                                    type: 'image',
                                    filename: file.filename,
                                    originalName: file.originalname || file.originalName,
                                    url: `uploads/images/${file.filename}`
                                };
                            }

                            return {
                                type: 'image',
                                filename: tempFilename,
                                originalName: file.originalname || file.originalName,
                                path: tempPath
                            };
                        }
                        return file;
                    })
                );
            }

            processedNewsData.authorId = authorId;

            const scheduled = await ScheduledNews.create({
                title: newsData.title,
                scheduledDate: new Date(scheduledDate),
                newsData: JSON.stringify(processedNewsData),
                authorId: authorId,
                status: 'scheduled'
            });

            logger.info(`–ù–æ–≤–æ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${scheduledDate}: "${newsData.title}"`);
            return scheduled;

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏:', error);
            throw error;
        }
    }

    async getScheduledNews(authorId = null) {
        try {
            const where = { status: 'scheduled' };
            if (authorId) {
                where.authorId = authorId;
            }

            return await ScheduledNews.findAll({
                where,
                order: [['scheduledDate', 'ASC']]
            });
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
            throw error;
        }
    }

    async cancelScheduledNews(id, authorId) {
        try {
            const scheduled = await ScheduledNews.findOne({
                where: {
                    id,
                    authorId,
                    status: 'scheduled'
                }
            });

            if (!scheduled) {
                throw new Error('–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            const newsData = JSON.parse(scheduled.newsData);
            if (newsData.mediaFiles) {
                newsData.mediaFiles.forEach(file => {
                    if (file.path && fs.existsSync(file.path)) {
                        fs.unlinkSync(file.path);
                    }
                });
            }

            await scheduled.destroy();
            logger.info(`–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞: "${scheduled.title}"`);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏:', error);
            throw error;
        }
    }

    initCleanup() {
        // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 2:00
        cron.schedule('0 2 * * *', () => {
            this.cleanupTempFiles();
        });

        // –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 3:00
        cron.schedule('0 3 * * *', () => {
            this.cleanupOrphanedFiles();
        });
    }

    async cleanupTempFiles() {
        try {
            const tempDir = path.join(__dirname, '../temp');
            if (!fs.existsSync(tempDir)) return;

            const files = fs.readdirSync(tempDir);
            const now = Date.now();
            const maxAge = 7 * 24 * 60 * 60 * 1000;

            for (const file of files) {
                const filePath = path.join(tempDir, file);
                const stats = fs.statSync(filePath);

                if (now - stats.mtime.getTime() > maxAge) {
                    fs.unlinkSync(filePath);
                    logger.info(`–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${file}`);
                }
            }
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
        }
    }

    async cleanupOrphanedFiles() {
        try {
            logger.info('üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤...');
            
            const uploadsDir = path.join(__dirname, '../uploads/images');
            if (!fs.existsSync(uploadsDir)) {
                logger.info('–ü–∞–ø–∫–∞ uploads/images –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ uploads/images
            const files = fs.readdirSync(uploadsDir);
            logger.info(`–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ uploads/images: ${files.length}`);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ URL –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const mediaUrls = await Media.findAll({
                where: { type: 'image' },
                attributes: ['url']
            });

            const usedFilenames = mediaUrls.map(media => path.basename(media.url));
            logger.info(`–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ë–î: ${usedFilenames.length}`);

            let deletedCount = 0;
            let skippedCount = 0;

            for (const file of files) {
                if (!usedFilenames.includes(file)) {
                    const filePath = path.join(uploadsDir, file);
                    try {
                        await fs.promises.unlink(filePath);
                        deletedCount++;
                        logger.info(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ñ–∞–π–ª: ${file}`);
                    } catch (error) {
                        logger.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, error);
                    }
                } else {
                    skippedCount++;
                }
            }

            logger.info(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ: ${deletedCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤:', error);
        }
    }
}

const newsScheduler = new NewsScheduler();
newsScheduler.initCleanup();

module.exports = newsScheduler;