require('dotenv').config();
const { Op } = require('sequelize');
const {
    News,
    User,
    Category,
    Comment,
    Media,
    sequelize,
} = require('../models');
const fs = require('fs');
const baseUrl = process.env.BASE_URL;
const newsScheduler = require('../schedulers/newsScheduler');
const logger = require('../logger');
const MoscowTimeUtils = require('../utils/moscowTimeUtils');

const path = require('path');

const SAFE_USER_ATTRIBUTES = ['id', 'username', 'avatarUrl', 'createdAt'];

const ADMIN_USER_ATTRIBUTES = ['id', 'username', 'email', 'avatarUrl', 'isAdmin', 'createdAt'];

// 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è formatMediaUrls –≤ newsController.js

const formatMediaUrls = (newsItems) => {
    return newsItems.map((item) => {
        const newsObj = item.toJSON();

        if (newsObj.mediaFiles) {
            console.log(`üîç [formatMediaUrls] –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ "${newsObj.title}" (ID: ${newsObj.id}):`);

            newsObj.mediaFiles = newsObj.mediaFiles.map((media) => {
                const mediaObj = { ...media };

                console.log(`   üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π URL: ${mediaObj.url}`);

                // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø–æ–ª–Ω—ã–π URL (http/https), –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                if (/^https?:\/\//i.test(mediaObj.url)) {
                    console.log(`   ‚úÖ –ü–æ–ª–Ω—ã–π URL –æ—Å—Ç–∞–≤–ª–µ–Ω: ${mediaObj.url}`);
                    return mediaObj;
                }

                // –ï—Å–ª–∏ URL —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∞–∑–æ–≤—ã–π –¥–æ–º–µ–Ω, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                if (mediaObj.url.includes(baseUrl)) {
                    console.log(`   ‚úÖ URL —Å baseUrl –æ—Å—Ç–∞–≤–ª–µ–Ω: ${mediaObj.url}`);
                    return mediaObj;
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
                let fullUrl;
                if (mediaObj.url.startsWith('uploads/')) {
                    // URL —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ uploads/images/filename
                    fullUrl = `${baseUrl}/${mediaObj.url}`;
                } else if (mediaObj.url.startsWith('/uploads/')) {
                    // URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–µ—à–∞
                    fullUrl = `${baseUrl}${mediaObj.url}`;
                } else {
                    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞
                    fullUrl = `${baseUrl}/uploads/images/${mediaObj.url}`;
                }

                mediaObj.url = fullUrl;
                console.log(`   üîß –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤: ${mediaObj.url}`);

                return mediaObj;
            });

            console.log(`   ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ URL –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏ "${newsObj.title}":`);
            newsObj.mediaFiles.forEach((media, index) => {
                console.log(`      ${index + 1}. ${media.type}: ${media.url}`);
            });
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∞–≤—Ç–æ—Ä–∞
        if (newsObj.authorDetails && newsObj.authorDetails.avatarUrl) {
            const originalAvatarUrl = newsObj.authorDetails.avatarUrl;

            if (/^https?:\/\//i.test(originalAvatarUrl)) {
                // –£–∂–µ –ø–æ–ª–Ω—ã–π URL
                newsObj.authorDetails.avatarUrl = originalAvatarUrl;
            } else if (originalAvatarUrl.includes(baseUrl)) {
                // –£–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç baseUrl
                newsObj.authorDetails.avatarUrl = originalAvatarUrl;
            } else {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
                if (originalAvatarUrl.startsWith('/')) {
                    newsObj.authorDetails.avatarUrl = `${baseUrl}${originalAvatarUrl}`;
                } else {
                    newsObj.authorDetails.avatarUrl = `${baseUrl}/${originalAvatarUrl}`;
                }
            }
        }

        return newsObj;
    });
};


exports.getAllNews = async (req, res) => {
    try {
        const isAdmin = req.user && req.user.isAdmin;
        const userAttributes = isAdmin ? ADMIN_USER_ATTRIBUTES : SAFE_USER_ATTRIBUTES;

        const news = await News.findAll({
            order: [['createdAt', 'DESC']],
            include: [
                {
                    model: User,
                    as: 'authorDetails',
                    attributes: userAttributes
                },
                {
                    model: Category,
                    as: 'categories',
                    through: { attributes: [] },
                },
                { model: Comment, as: 'comments' },
                { model: Media, as: 'mediaFiles' },
            ],
        });

        const modifiedNews = formatMediaUrls(news);
        res.json(modifiedNews);
    } catch (err) {
        res.status(500).json({
            error: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: ${err.message}`,
        });
    }
};

exports.generateSchemaForYandex = (news) => {
    const baseUrl = process.env.BASE_URL || 'https://ingushetiatv.ru';

    const articleSchema = {
        "@context": "http://schema.org",
        "@type": "NewsArticle",
        "mainEntityOfPage": {
            "@type": "WebPage",
            "@id": `${baseUrl}/news/${news.id}`
        },
        "headline": news.title,
        "description": news.description || news.title.substring(0, 150),
        "image": [],
        "author": {
            "@type": "Person",
            "name": news.authorDetails?.username || "–†–µ–¥–∞–∫—Ü–∏—è"
        },
        "publisher": {
            "@type": "Organization",
            "name": "–í–µ—Å—Ç–∏ –ò–Ω–≥—É—à–µ—Ç–∏–∏",
            "logo": {
                "@type": "ImageObject",
                "url": `${baseUrl}/logo.png`,
                "width": 600,
                "height": 60
            }
        },
        "datePublished": news.publishDate || news.createdAt,
        "dateModified": news.updatedAt || news.publishDate || news.createdAt,
        "keywords": news.categories?.map(cat => cat.name).join(', ') || "–Ω–æ–≤–æ—Å—Ç–∏, –ò–Ω–≥—É—à–µ—Ç–∏—è, –ì–¢–†–ö"
    };

    if (news.mediaFiles && news.mediaFiles.length > 0) {
        const imageMedia = news.mediaFiles.filter(media => media.type === 'image');
        if (imageMedia.length > 0) {
            articleSchema.image = imageMedia.map(media => {
                const imageUrl = media.url.startsWith('http')
                    ? media.url
                    : `${baseUrl}${media.url}`;

                return imageUrl;
            });
        } else {
            articleSchema.image = [`${baseUrl}/default.png`];
        }
    }

    if (news.content) {
        const plainText = news.content.replace(/<[^>]*>?/gm, '');
        articleSchema.articleBody = plainText;
    }

    return JSON.stringify(articleSchema);
};

exports.getNewsById = async (req, res) => {
    try {
        const { id } = req.params;

        const isAdmin = req.user && req.user.isAdmin;
        const userAttributes = isAdmin ? ADMIN_USER_ATTRIBUTES : SAFE_USER_ATTRIBUTES;

        const news = await News.findByPk(id, {
            include: [
                {
                    model: Category,
                    as: 'categories',
                    through: { attributes: [] },
                },
                {
                    model: User,
                    as: 'authorDetails',
                    attributes: userAttributes
                },
                { model: Comment, as: 'comments' },
                {
                    model: Media,
                    as: 'mediaFiles',
                },
            ],
        });
        if (!news)
            return res.status(404).json({ message: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

        await news.increment('views');

        const modifiedNews = formatMediaUrls([news])[0];

        if (req.isBot) {
            try {
                const baseUrl = process.env.BASE_URL || `https://${req.get('host')}`;
                const seoHtmlPath = path.join(__dirname, '../../public/seo.html');
                console.log(`–ò—â—É SEO-—à–∞–±–ª–æ–Ω –ø–æ –ø—É—Ç–∏: ${seoHtmlPath}`);
                console.log(`–®–∞–±–ª–æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${fs.existsSync(seoHtmlPath)}`);

                if (fs.existsSync(seoHtmlPath)) {
                    console.log('SEO-—à–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω');

                    let html = fs.readFileSync(seoHtmlPath, 'utf8');

                    const imageMedia = modifiedNews.mediaFiles?.find(media => media.type === 'image');
                    const imageUrl = imageMedia
                        ? (imageMedia.url.startsWith('http') ? imageMedia.url : `${baseUrl}${imageMedia.url}`)
                        : `${baseUrl}/default.png`;

                    const author = modifiedNews.authorDetails?.username || '–†–µ–¥–∞–∫—Ü–∏—è';
                    const publishDate = modifiedNews.publishDate || modifiedNews.createdAt;
                    const plainContent = modifiedNews.content?.replace(/<[^>]*>?/gm, '') || '';

                    html = html
                        .replace(/%TITLE%/g, modifiedNews.title)
                        .replace(/%DESCRIPTION%/g, modifiedNews.description || modifiedNews.title.substring(0, 150))
                        .replace(/%FULLTEXT%/g, plainContent)
                        .replace(/%NEWS_ID%/g, id)
                        .replace(/%IMAGE_URL%/g, imageUrl)
                        .replace(/%PUBLISH_DATE%/g, publishDate)
                        .replace(/%AUTHOR%/g, author)
                        .replace(/%CONTENT%/g, modifiedNews.content || '')
                        .replace(/\${baseUrl}/g, baseUrl)
                        .replace(/%BASE_URL%/g, baseUrl);

                    const publisherMarkup = `
                        <div itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
                            <meta itemprop="name" content="–í–µ—Å—Ç–∏ –ò–Ω–≥—É—à–µ—Ç–∏–∏" />
                            <div itemprop="logo" itemscope itemtype="http://schema.org/ImageObject">
                                <meta itemprop="url" content="${baseUrl}/logo.png" />
                            </div>
                        </div>
                    `;
                    html = html.replace(/%PUBLISHER_MARKUP%/g, publisherMarkup);

                    return res.send(html);
                }
                console.error('–ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:', path.resolve(seoHtmlPath));

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ SEO-—à–∞–±–ª–æ–Ω–∞:', error);
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SEO HTML:', error);
            }
        }

        res.json(modifiedNews);
    } catch (err) {
        res.status(500).json({
            error: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: ${err.message}`,
        });
    }
};

exports.getNewsByDate = async (req, res) => {
    try {
        const { date } = req.query;

        const startOfDay = new Date(date);
        startOfDay.setUTCHours(0, 0, 0, 0);
        const endOfDay = new Date(date);
        endOfDay.setUTCHours(23, 59, 59, 999);

        const isAdmin = req.user && req.user.isAdmin;
        const userAttributes = isAdmin ? ADMIN_USER_ATTRIBUTES : SAFE_USER_ATTRIBUTES;

        const news = await News.findAll({
            where: { createdAt: { [Op.between]: [startOfDay, endOfDay] } },
            include: [
                {
                    model: User,
                    as: 'authorDetails',
                    attributes: userAttributes
                },
                {
                    model: Category,
                    as: 'categories',
                    through: { attributes: [] },
                },
                { model: Comment, as: 'comments' },
                { model: Media, as: 'mediaFiles' },
            ],
        });

        if (!news || news.length === 0)
            return res
                .status(404)
                .json({ message: '–ù–æ–≤–æ—Å—Ç–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.' });

        const modifiedNews = formatMediaUrls(news);
        res.json(modifiedNews);
    } catch (err) {
        res.status(500).json({
            error: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –¥–∞—Ç–µ: ${err.message}`,
        });
    }
};


// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –º–µ—Ç–æ–¥ createNews –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

exports.createNews = async (req, res) => {
    const { title, content, categoryIds, videoUrl, publishDate, scheduleForLater } = req.body;
    const mediaFiles = req.files;
    const authorId = req.user.id;

    // –ù–û–í–û–ï: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    console.log('üì∞ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', {
        userId: authorId,
        title: title,
        hasMediaFiles: !!mediaFiles,
        mediaFilesKeys: mediaFiles ? Object.keys(mediaFiles) : null,
        scheduleForLater: scheduleForLater,
        publishDate: publishDate
    });

    if (mediaFiles) {
        console.log('üìÅ –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
        console.log('  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ mediaFiles:', JSON.stringify(mediaFiles, null, 2));

        if (mediaFiles.images) {
            console.log(`  üì∑ –ù–∞–π–¥–µ–Ω–æ ${mediaFiles.images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:`);
            mediaFiles.images.forEach((file, index) => {
                console.log(`    ${index + 1}. ${file.originalname} (${file.mimetype}, ${file.size} bytes)`);
                console.log(`       Path: ${file.path}`);
                console.log(`       Filename: ${file.filename}`);
            });
        } else {
            console.log('  ‚ö†Ô∏è –ú–∞—Å—Å–∏–≤ images –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ mediaFiles');
        }
    } else {
        console.log('üìÅ –§–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    }

    if (scheduleForLater && publishDate) {
        try {
            let scheduledDate = new Date(publishDate);

            if (isNaN(scheduledDate.getTime())) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:', publishDate);
                return res.status(400).json({
                    errors: [{
                        type: "field",
                        msg: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã",
                        path: "publishDate",
                        location: "body"
                    }]
                });
            }

            const now = new Date();

            console.log('üïê –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:');
            console.log(`   –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: ${publishDate}`);
            console.log(`   –ü–∞—Ä—Å–∏—Ç—Å—è –∫–∞–∫: ${scheduledDate.toISOString()}`);
            console.log(`   –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: ${scheduledDate.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`);
            console.log(`   –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC: ${now.toISOString()}`);
            console.log(`   –¢–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ: ${now.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`);

            const minFutureTime = new Date(now.getTime() + 60 * 1000);

            if (scheduledDate <= minFutureTime) {
                console.log('‚ùå –î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ');
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
                cleanupUploadedFiles(mediaFiles);
                return res.status(400).json({
                    errors: [{
                        type: "field",
                        value: publishDate,
                        msg: "–î–∞—Ç–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º",
                        path: "publishDate",
                        location: "body"
                    }]
                });
            }

            console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
            const newsData = {
                title,
                content,
                categoryIds: JSON.parse(categoryIds || '[]'),
                videoUrl,
                publishDate: scheduledDate,
                mediaFiles: [] // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
            };

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if (mediaFiles && mediaFiles.images && mediaFiles.images.length > 0) {
                console.log(`üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${mediaFiles.images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);

                newsData.mediaFiles = mediaFiles.images.map(file => {
                    console.log(`   –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: ${file.originalname}`);
                    console.log(`     –ü—É—Ç—å: ${file.path}`);
                    console.log(`     Filename: ${file.filename}`);
                    console.log(`     MIME: ${file.mimetype}`);
                    console.log(`     –†–∞–∑–º–µ—Ä: ${file.size}`);
                    
                    return {
                        type: file.mimetype.startsWith('image/') ? 'image' : 'other',
                        filename: file.filename,
                        originalname: file.originalname,
                        path: file.path, // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                        mimetype: file.mimetype,
                        size: file.size
                    };
                });

                console.log(`‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${newsData.mediaFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞`);
            } else {
                console.log('‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
            }

            console.log('üìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', {
                title: newsData.title,
                categoryIds: newsData.categoryIds,
                hasVideoUrl: !!newsData.videoUrl,
                mediaFilesCount: newsData.mediaFiles.length,
                publishDate: newsData.publishDate.toISOString()
            });

            console.log('üîÑ –í—ã–∑–æ–≤ newsScheduler.scheduleNews...');
            const scheduledNews = await newsScheduler.scheduleNews(
                newsData,
                scheduledDate,
                authorId
            );

            console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ:', {
                id: scheduledNews.id,
                title: scheduledNews.title,
                status: scheduledNews.status
            });

            logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å: ${title}`, {
                authorId,
                scheduledDate: scheduledDate.toISOString(),
                scheduledDateMoscow: scheduledDate.toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' }),
                newsId: scheduledNews.id
            });

            return res.status(201).json({
                message: '–ù–æ–≤–æ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
                scheduledNews: {
                    id: scheduledNews.id,
                    title: scheduledNews.title,
                    scheduledDate: scheduledNews.scheduledDate,
                    scheduledDateMoscow: new Date(scheduledNews.scheduledDate).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' }),
                    status: scheduledNews.status
                }
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤ createNews –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', {
                error: error.message,
                stack: error.stack,
                publishDate,
                authorId
            });

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            cleanupUploadedFiles(mediaFiles);

            logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏:', error);

            return res.status(400).json({
                errors: [{
                    type: "field",
                    msg: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏: ${error.message}`,
                    path: "publishDate",
                    location: "body"
                }]
            });
        }
    }

    // –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–Ø - —Ç–æ–∂–µ –¥–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log('üìù –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏...');

    let transaction;
    try {
        transaction = await sequelize.transaction();

        const newsData = {
            title,
            content,
            authorId,
        };

        if (publishDate && !scheduleForLater) {
            const finalDate = new Date(publishDate);
            if (!isNaN(finalDate.getTime())) {
                newsData.publishDate = finalDate;
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã');
            }
        }

        console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        const news = await News.create(newsData, { transaction });
        console.log(`‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —Å ID: ${news.id}`);

        let parsedCategoryIds;
        try {
            parsedCategoryIds = JSON.parse(categoryIds).map(Number);
            if (!Array.isArray(parsedCategoryIds) || parsedCategoryIds.some(id => !Number.isInteger(id))) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
            }
        } catch (e) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        }

        if (parsedCategoryIds.length > 0) {
            console.log('üè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
            const categories = await Category.findAll({
                where: { id: parsedCategoryIds },
                transaction,
            });

            if (categories.length !== parsedCategoryIds.length) {
                throw new Error('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }

            await news.addCategories(categories, { transaction });
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        } else {
            throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
        }

        const mediaInstances = [];

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (mediaFiles && mediaFiles.images && mediaFiles.images.length > 0) {
            console.log(`üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${mediaFiles.images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...`);

            for (let [index, file] of mediaFiles.images.entries()) {
                console.log(`  –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª ${index + 1}:`, {
                    originalname: file.originalname,
                    filename: file.filename,
                    mimetype: file.mimetype,
                    size: file.size,
                    path: file.path
                });

                try {
                    const imageUrl = path.posix.join('uploads', 'images', file.filename);
                    console.log(`    –°–æ–∑–¥–∞–µ–º URL: ${imageUrl}`);

                    const media = await Media.create({
                        url: imageUrl,
                        type: 'image',
                    }, { transaction });

                    mediaInstances.push(media);
                    console.log(`    ‚úÖ –ú–µ–¥–∏–∞ —Å–æ–∑–¥–∞–Ω–æ —Å ID: ${media.id}`);
                } catch (mediaError) {
                    console.error(`    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–¥–∏–∞ –¥–ª—è —Ñ–∞–π–ª–∞ ${file.originalname}:`, mediaError);
                    throw mediaError;
                }
            }
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${mediaInstances.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
        } else {
            console.log('‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
        }

        if (videoUrl) {
            console.log('üé• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ...');
            const media = await Media.create({
                url: videoUrl,
                type: 'video',
            }, { transaction });
            mediaInstances.push(media);
            console.log('‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        }

        if (mediaInstances.length > 0) {
            console.log(`üîó –°–≤—è–∑—ã–≤–∞–Ω–∏–µ ${mediaInstances.length} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç—å—é...`);
            await news.addMediaFiles(mediaInstances, { transaction });
            console.log(`‚úÖ –°–≤—è–∑–∞–Ω–æ ${mediaInstances.length} –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤`);
        }

        console.log('üíæ –ö–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
        await transaction.commit();

        console.log('üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏...');
        const createdNews = await News.findByPk(news.id, {
            include: [
                { model: Category, as: 'categories' },
                { model: Media, as: 'mediaFiles' }
            ],
        });

        console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å:', {
            id: createdNews.id,
            title: createdNews.title,
            mediaFilesCount: createdNews.mediaFiles?.length || 0,
            categoriesCount: createdNews.categories?.length || 0
        });

        logger.info(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: ${title}`, {
            authorId,
            newsId: news.id,
            publishDate: newsData.publishDate,
            immediate: !scheduleForLater
        });

        console.log('‚úÖ –ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—É');
        res.status(201).json(createdNews);

    } catch (err) {
        if (transaction) {
            console.log('üîÑ –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
            await transaction.rollback();
        }

        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏:', {
            error: err.message,
            stack: err.stack
        });

        res.status(400).json({
            error: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: ${err.message}`,
            errors: [{
                location: "body",
                msg: err.message,
                path: "general",
                type: "field"
            }]
        });
    }
};

exports.updateNews = async (req, res) => {
    const { id } = req.params;
    let { title, content, categoryIds, videoUrl, existingMedia, publishDate } = req.body;
    const mediaFiles = req.files;
    const authorId = req.user.id;

    console.log('üîÑ [UPDATE] –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏:', {
        newsId: id,
        hasNewFiles: !!(mediaFiles && mediaFiles.images),
        newFilesCount: mediaFiles && mediaFiles.images ? mediaFiles.images.length : 0,
        existingMedia: existingMedia,
        videoUrl: videoUrl ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    });

    let transaction;
    const uploadedFiles = []; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–æ–≤–æ—Å—Ç—å —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
        const news = await News.findByPk(id, {
            include: [
                { model: Media, as: 'mediaFiles' },
                { model: Category, as: 'categories' },
            ],
        });

        if (!news) {
            // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            cleanupUploadedFiles(mediaFiles);
            return res.status(404).json({ error: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        console.log('üì∞ [UPDATE] –¢–µ–∫—É—â–∞—è –Ω–æ–≤–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞:', {
            title: news.title,
            currentMediaCount: news.mediaFiles.length,
            currentMediaIds: news.mediaFiles.map(m => ({ id: m.id, type: m.type, url: m.url }))
        });

        // 2. –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = await sequelize.transaction();

        // 3. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        const updateData = { title, content, authorId };
        if (publishDate) {
            const date = new Date(publishDate);
            if (!isNaN(date)) {
                updateData.publishDate = date;
            } else {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã');
            }
        }

        await news.update(updateData, { transaction });
        console.log('‚úÖ [UPDATE] –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');

        // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (typeof categoryIds === 'string') {
            categoryIds = JSON.parse(categoryIds);
        }
        if (Array.isArray(categoryIds)) {
            const categories = await Category.findAll({
                where: { id: categoryIds },
                transaction,
            });
            await news.setCategories(categories, { transaction });
            console.log('‚úÖ [UPDATE] –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        }

        // 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
        let existingMediaIds = [];
        try {
            existingMediaIds = existingMedia ? JSON.parse(existingMedia) : [];
            if (!Array.isArray(existingMediaIds)) {
                existingMediaIds = [];
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è [UPDATE] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ existingMedia, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
            existingMediaIds = [];
        }

        console.log('üìã [UPDATE] –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:', {
            existingMediaIds,
            currentImageFiles: news.mediaFiles.filter(m => m.type === 'image').map(m => m.id)
        });

        // 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        const currentImageFiles = news.mediaFiles.filter(media => media.type === 'image');
        const imagesToDelete = currentImageFiles.filter(media => !existingMediaIds.includes(media.id));

        console.log('üóëÔ∏è [UPDATE] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', imagesToDelete.map(m => ({
            id: m.id,
            url: m.url
        })));

        // 7. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        for (const media of imagesToDelete) {
            await deleteMediaFile(media);
        }

        // 8. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if (imagesToDelete.length > 0) {
            await Media.destroy({
                where: {
                    id: imagesToDelete.map(media => media.id)
                },
                transaction,
            });
            console.log(`‚úÖ [UPDATE] –£–¥–∞–ª–µ–Ω–æ ${imagesToDelete.length} –∑–∞–ø–∏—Å–µ–π –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –∏–∑ –ë–î`);
        }

        // 9. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const newMediaInstances = [];
        if (mediaFiles && mediaFiles.images && mediaFiles.images.length > 0) {
            console.log(`üìÅ [UPDATE] –î–æ–±–∞–≤–ª—è–µ–º ${mediaFiles.images.length} –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);

            for (const file of mediaFiles.images) {
                uploadedFiles.push(file.path); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

                const imageUrl = path.posix.join('uploads', 'images', file.filename);
                const media = await Media.create({
                    url: imageUrl,
                    type: 'image',
                }, { transaction });

                newMediaInstances.push(media);
                console.log(`üì∑ [UPDATE] –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageUrl} (ID: ${media.id})`);
            }

            if (newMediaInstances.length > 0) {
                await news.addMediaFiles(newMediaInstances, { transaction });
                console.log(`‚úÖ [UPDATE] –î–æ–±–∞–≤–ª–µ–Ω–æ ${newMediaInstances.length} –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ –Ω–æ–≤–æ—Å—Ç–∏`);
            }
        }

        // 10. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        await handleVideoUpdate(news, videoUrl, transaction);

        // 11. –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await transaction.commit();
        transaction = null; // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        console.log('‚úÖ [UPDATE] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        // 12. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
        const updatedNews = await News.findByPk(id, {
            include: [
                { model: Media, as: 'mediaFiles' },
                { model: Category, as: 'categories' },
            ],
        });

        const modifiedNews = formatMediaUrls([updatedNews])[0];

        console.log('üìä [UPDATE] –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã:', modifiedNews.mediaFiles.map(m => ({
            id: m.id,
            type: m.type,
            url: m.url
        })));

        res.status(200).json({
            message: '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
            news: modifiedNews,
        });

    } catch (err) {
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
        if (transaction) {
            console.log('üîÑ [UPDATE] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
            await transaction.rollback();
        }

        // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        cleanupUploadedFiles(mediaFiles);

        console.error('‚ùå [UPDATE] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏:', {
            error: err.message,
            stack: err.stack,
            newsId: id
        });

        res.status(500).json({
            error: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: ${err.message}`,
        });
    }
};

// 2. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
async function deleteMediaFile(media) {
    const pathVariants = [
        path.resolve(__dirname, '../../uploads/images/', path.basename(media.url)),
        path.resolve(__dirname, '../uploads/images/', path.basename(media.url)),
        path.resolve(__dirname, '../../', media.url.replace(/\/+/g, path.sep)),
        path.resolve(__dirname, '../', media.url.replace(/\/+/g, path.sep))
    ];

    let fileDeleted = false;

    for (const mediaPath of pathVariants) {
        try {
            if (fs.existsSync(mediaPath)) {
                await fs.promises.unlink(mediaPath);
                console.log(`‚úÖ [DELETE] –§–∞–π–ª —É–¥–∞–ª–µ–Ω: ${mediaPath}`);
                fileDeleted = true;
                break;
            }
        } catch (err) {
            console.error(`‚ùå [DELETE] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${mediaPath}:`, err.message);
        }
    }

    if (!fileDeleted) {
        console.warn(`‚ö†Ô∏è [DELETE] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${media.url}`);
    }

    return fileDeleted;
}

// 3. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
async function handleVideoUpdate(news, videoUrl, transaction) {
    const existingVideo = news.mediaFiles.find(m => m.type === 'video');

    if (videoUrl && videoUrl.trim() !== '') {
        console.log('üé• [UPDATE] –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–µ–æ URL:', videoUrl.trim());

        if (existingVideo) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –≤–∏–¥–µ–æ
            await existingVideo.update({ url: videoUrl.trim() }, { transaction });
            console.log('‚úÖ [UPDATE] –í–∏–¥–µ–æ URL –æ–±–Ω–æ–≤–ª–µ–Ω');
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
            const newVideo = await Media.create({
                url: videoUrl.trim(),
                type: 'video',
            }, { transaction });
            await news.addMediaFiles([newVideo], { transaction });
            console.log('‚úÖ [UPDATE] –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        }
    } else {
        // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ –µ—Å–ª–∏ URL –ø—É—Å—Ç–æ–π
        if (existingVideo) {
            await news.removeMediaFiles([existingVideo], { transaction });
            await Media.destroy({
                where: { id: existingVideo.id },
                transaction,
            });
            console.log('‚úÖ [UPDATE] –í–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ');
        }
    }
}

// 4. –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
function cleanupUploadedFiles(mediaFiles) {
    if (!mediaFiles || !mediaFiles.images) return;

    console.log('üóëÔ∏è [CLEANUP] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ...');

    for (const file of mediaFiles.images) {
        try {
            if (fs.existsSync(file.path)) {
                fs.unlinkSync(file.path);
                console.log(`üóëÔ∏è [CLEANUP] –£–¥–∞–ª–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ: ${file.path}`);
            }
        } catch (err) {
            console.error(`‚ùå [CLEANUP] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file.path}:`, err.message);
        }
    }
}

// 5. –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤
exports.cleanupOrphanedFiles = async (req, res) => {
    try {
        console.log('üßπ [CLEANUP] –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤...');

        const uploadsDir = path.join(__dirname, '../uploads/images');
        if (!fs.existsSync(uploadsDir)) {
            return res.json({
                message: '–ü–∞–ø–∫–∞ uploads/images –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                deletedCount: 0,
                skippedCount: 0
            });
        }

        const files = fs.readdirSync(uploadsDir);
        console.log(`üìÅ [CLEANUP] –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: ${files.length}`);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ë–î
        const mediaUrls = await Media.findAll({
            where: { type: 'image' },
            attributes: ['url']
        });

        const usedFilenames = mediaUrls.map(media => path.basename(media.url));
        console.log(`üìã [CLEANUP] –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ë–î: ${usedFilenames.length}`);

        let deletedCount = 0;
        let skippedCount = 0;
        const deletedFiles = [];

        for (const file of files) {
            if (!usedFilenames.includes(file)) {
                const filePath = path.join(uploadsDir, file);
                try {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞ (—É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
                    const stats = fs.statSync(filePath);
                    const fileAge = Date.now() - stats.mtime.getTime();
                    const oneHour = 60 * 60 * 1000;

                    if (fileAge > oneHour) {
                        await fs.promises.unlink(filePath);
                        deletedCount++;
                        deletedFiles.push(file);
                        console.log(`üóëÔ∏è [CLEANUP] –£–¥–∞–ª–µ–Ω –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏–π —Ñ–∞–π–ª: ${file}`);
                    } else {
                        skippedCount++;
                        console.log(`‚è≠Ô∏è [CLEANUP] –ü—Ä–æ–ø—É—â–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: ${file} (–≤–æ–∑—Ä–∞—Å—Ç: ${Math.round(fileAge / 60000)} –º–∏–Ω)`);
                    }
                } catch (error) {
                    console.error(`‚ùå [CLEANUP] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, error.message);
                    skippedCount++;
                }
            } else {
                skippedCount++;
            }
        }

        console.log(`‚úÖ [CLEANUP] –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ: ${deletedCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`);

        res.json({
            message: '–û—á–∏—Å—Ç–∫–∞ –æ—Å–∏—Ä–æ—Ç–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            totalFiles: files.length,
            deletedCount,
            skippedCount,
            deletedFiles: deletedFiles.slice(0, 10),
            note: '–£–¥–∞–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞'
        });

    } catch (error) {
        console.error('‚ùå [CLEANUP] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
        res.status(500).json({
            error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: ${error.message}`
        });
    }
};

exports.deleteNews = async (req, res) => {
    try {
        const { id } = req.params;
        const news = await News.findByPk(id, {
            include: [{ model: Media, as: 'mediaFiles' }],
        });

        if (!news) {
            return res.status(404).json({ error: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
        }

        const transaction = await sequelize.transaction();

        try {
            for (let media of news.mediaFiles) {
                if (media.type === 'image' || media.type === 'audio') {
                    const pathVariants = [
                        path.resolve(__dirname, '../../', media.url.replace(/\/+/g, path.sep)),
                        path.resolve(__dirname, '../', media.url.replace(/\/+/g, path.sep)),
                        path.resolve(__dirname, '../../uploads/images/', path.basename(media.url)),
                        path.resolve(__dirname, '../uploads/images/', path.basename(media.url))
                    ];

                    let fileDeleted = false;
                    
                    for (const mediaPath of pathVariants) {
                        try {
                            if (fs.existsSync(mediaPath)) {
                                await fs.promises.unlink(mediaPath);
                                console.log(`‚úÖ –ú–µ–¥–∏–∞ —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${mediaPath}`);
                                fileDeleted = true;
                                break;
                            }
                        } catch (err) {
                            if (err.code !== 'ENOENT') {
                                console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞ ${mediaPath}:`, err);
                            }
                        }
                    }

                    if (!fileDeleted) {
                        console.warn(`‚ö†Ô∏è –ú–µ–¥–∏–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: ${media.url}`);
                    }
                }
            }

            const mediaIds = news.mediaFiles.map((media) => media.id);
            if (mediaIds.length > 0) {
                await Media.destroy({
                    where: { id: mediaIds },
                    transaction,
                });
            }

            await news.destroy({ transaction });

            await transaction.commit();

            return res.json({ message: '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.' });
        } catch (err) {
            await transaction.rollback();
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:', err);
            return res.status(500).json({
                error: `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏: ${err.message}`,
            });
        }
    } catch (err) {
        console.error('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
        return res.status(500).json({
            error: `–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${err.message}`,
        });
    }
};

exports.cleanupOrphanedFiles = async (req, res) => {
    try {
        const uploadsDir = path.join(__dirname, '../uploads/images');
        if (!fs.existsSync(uploadsDir)) {
            return res.json({ 
                message: '–ü–∞–ø–∫–∞ uploads/images –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
                deletedCount: 0,
                skippedCount: 0
            });
        }

        const files = fs.readdirSync(uploadsDir);

        const mediaUrls = await Media.findAll({
            where: { type: 'image' },
            attributes: ['url']
        });

        const usedFilenames = mediaUrls.map(media => path.basename(media.url));

        let deletedCount = 0;
        let skippedCount = 0;
        const deletedFiles = [];

        for (const file of files) {
            if (!usedFilenames.includes(file)) {
                const filePath = path.join(uploadsDir, file);
                try {
                    await fs.promises.unlink(filePath);
                    deletedCount++;
                    deletedFiles.push(file);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, error);
                }
            } else {
                skippedCount++;
            }
        }

        res.json({
            message: '–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
            totalFiles: files.length,
            deletedCount,
            skippedCount,
            deletedFiles: deletedFiles.slice(0, 10)
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤:', error);
        res.status(500).json({
            error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: ${error.message}`
        });
    }
};

