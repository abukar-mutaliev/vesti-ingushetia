require('dotenv').config();
const { sequelize, ScheduledNews } = require('./models');
const logger = require('./logger');

async function checkTimezone() {
    try {
        await sequelize.authenticate();
        logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ PostgreSQL
        const [dbTimezone] = await sequelize.query('SHOW timezone;');
        logger.info(`üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å PostgreSQL: ${dbTimezone[0].TimeZone}`);

        const [dbTime] = await sequelize.query('SELECT NOW() as current_time;');
        logger.info(`üïí –í—Ä–µ–º—è –≤ PostgreSQL: ${dbTime[0].current_time}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Node.js
        logger.info(`üü¢ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å Node.js: ${process.env.TZ || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
        logger.info(`üü¢ –í—Ä–µ–º—è Node.js: ${new Date().toISOString()}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
        const [rawScheduled] = await sequelize.query(`
            SELECT id, title, "scheduledDate", status 
            FROM "ScheduledNews" 
            WHERE status = 'scheduled'
            ORDER BY "scheduledDate";
        `);

        logger.info(`üìÖ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (–ø—Ä—è–º–æ–π SQL):`);
        rawScheduled.forEach(news => {
            logger.info(`   - "${news.title}" –Ω–∞ ${news.scheduledDate}`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Sequelize
        const sequelizeScheduled = await ScheduledNews.findAll({
            where: { status: 'scheduled' },
            order: [['scheduledDate', 'ASC']]
        });

        logger.info(`üìÖ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (—á–µ—Ä–µ–∑ Sequelize):`);
        sequelizeScheduled.forEach(news => {
            logger.info(`   - "${news.title}" –Ω–∞ ${news.scheduledDate.toISOString()}`);
        });

        // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        const testTime = new Date();
        const testTimeIn2Min = new Date(testTime.getTime() + 2 * 60 * 1000);
        
        logger.info(`\nüß™ –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏:`);
        logger.info(`   - –°–µ–π—á–∞—Å JS: ${testTime.toISOString()}`);
        logger.info(`   - +2 –º–∏–Ω JS: ${testTimeIn2Min.toISOString()}`);

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞:', error);
        process.exit(1);
    }
}

checkTimezone(); 