// utils/moscowTimeUtils.js

class MoscowTimeUtils {
    static MOSCOW_TIMEZONE = 'Europe/Moscow';
    static MOSCOW_OFFSET_HOURS = 3; // UTC+3

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
     */
    static now() {
        return new Date();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
     */
    static nowMoscow() {
        return new Date().toLocaleString('ru-RU', {
            timeZone: this.MOSCOW_TIMEZONE,
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
     */
    static formatMoscowTime(date, options = {}) {
        if (!date) return '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

        const defaultOptions = {
            timeZone: this.MOSCOW_TIMEZONE,
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            ...options
        };

        return new Date(date).toLocaleString('ru-RU', defaultOptions);
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç Date
     */
    static parseDateTime(dateTimeString) {
        if (!dateTimeString) return null;

        const date = new Date(dateTimeString);
        if (isNaN(date.getTime())) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã');
        }

        return date;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
     */
    static isValidFutureDate(dateTimeString) {
        try {
            const date = this.parseDateTime(dateTimeString);
            const now = new Date();
            return date && date > now;
        } catch {
            return false;
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    static logTimeComparison(label, date) {
        const moscowTime = this.formatMoscowTime(date);
        const utcTime = new Date(date).toISOString();

        console.log(`üïê ${label}:`);
        console.log(`   UTC: ${utcTime}`);
        console.log(`   –ú–æ—Å–∫–≤–∞: ${moscowTime}`);

        return { utcTime, moscowTime };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    static getTimeDebugInfo(date = new Date()) {
        const utcTime = date.toISOString();
        const moscowTime = this.formatMoscowTime(date);
        const localTime = date.toString();
        const timestamp = date.getTime();
        const offsetMinutes = date.getTimezoneOffset();

        return {
            utcTime,
            moscowTime,
            localTime,
            timestamp,
            offsetMinutes,
            offsetHours: offsetMinutes / 60,
            timezone: process.env.TZ
        };
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    static validateScheduleDate(dateString) {
        if (!dateString) {
            return { valid: false, error: '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞' };
        }

        try {
            const date = this.parseDateTime(dateString);
            const now = new Date();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º (–º–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞)
            const minFutureTime = new Date(now.getTime() + 60 * 1000); // +1 –º–∏–Ω—É—Ç–∞
            if (date <= minFutureTime) {
                return {
                    valid: false,
                    error: '–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É –≤ –±—É–¥—É—â–µ–º',
                    received: this.formatMoscowTime(date),
                    current: this.formatMoscowTime(now)
                };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º (–º–∞–∫—Å–∏–º—É–º 1 –≥–æ–¥)
            const maxFutureTime = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000); // +1 –≥–æ–¥
            if (date > maxFutureTime) {
                return {
                    valid: false,
                    error: '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —á–µ–º —á–µ—Ä–µ–∑ –≥–æ–¥',
                    received: this.formatMoscowTime(date),
                    maxAllowed: this.formatMoscowTime(maxFutureTime)
                };
            }

            return {
                valid: true,
                date,
                moscowTime: this.formatMoscowTime(date),
                utcTime: date.toISOString()
            };
        } catch (error) {
            return {
                valid: false,
                error: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: ${error.message}`
            };
        }
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å UTC –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    static utcToMoscowDisplay(utcDateString) {
        if (!utcDateString) return '';

        try {
            const date = new Date(utcDateString);
            return this.formatMoscowTime(date);
        } catch {
            return '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã';
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ª–æ–≥–æ–≤
     */
    static getLogTimestamp() {
        return `[${this.nowMoscow()}]`;
    }
}

module.exports = MoscowTimeUtils;