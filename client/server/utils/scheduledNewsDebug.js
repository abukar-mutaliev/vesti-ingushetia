const fs = require('fs');
const path = require('path');
const { ScheduledNews } = require('../models');

class ScheduledNewsDebugger {
    async checkScheduledNews() {
        try {
            console.log('üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–õ–û–ñ–ï–ù–ù–´–• –ù–û–í–û–°–¢–ï–ô ===');
            
            const scheduledNews = await ScheduledNews.findAll({
                where: { status: 'scheduled' },
                order: [['scheduledDate', 'ASC']]
            });

            console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: ${scheduledNews.length}`);

            for (const news of scheduledNews) {
                console.log(`\nüì∞ --- –ù–æ–≤–æ—Å—Ç—å ID: ${news.id} ---`);
                console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${news.title}`);
                console.log(`   –î–∞—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${news.scheduledDate}`);
                console.log(`   –°—Ç–∞—Ç—É—Å: ${news.status}`);
                console.log(`   –ê–≤—Ç–æ—Ä ID: ${news.authorId}`);

                try {
                    const newsData = JSON.parse(news.newsData);
                    console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${newsData.categoryIds?.length || 0}`);
                    console.log(`   –í–∏–¥–µ–æ URL: ${newsData.videoUrl ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`);
                    console.log(`   –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã: ${newsData.mediaFiles?.length || 0}`);

                    if (newsData.mediaFiles && newsData.mediaFiles.length > 0) {
                        console.log(`   üìÅ –ê–Ω–∞–ª–∏–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤:`);
                        
                        for (const [index, media] of newsData.mediaFiles.entries()) {
                            console.log(`      ${index + 1}. –¢–∏–ø: ${media.type}`);
                            console.log(`         Filename: ${media.filename || '–Ω–µ—Ç'}`);
                            console.log(`         OriginalName: ${media.originalName || '–Ω–µ—Ç'}`);
                            console.log(`         Path: ${media.path || '–Ω–µ—Ç'}`);
                            console.log(`         URL: ${media.url || '–Ω–µ—Ç'}`);
                            console.log(`         Fallback: ${media.fallback ? '–¥–∞' : '–Ω–µ—Ç'}`);
                            console.log(`         Placeholder: ${media.placeholder ? '–¥–∞' : '–Ω–µ—Ç'}`);
                            console.log(`         Scheduled: ${media.scheduled ? '–¥–∞' : '–Ω–µ—Ç'}`);

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
                            if (media.path) {
                                const exists = fs.existsSync(media.path);
                                console.log(`         –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${exists ? '‚úÖ' : '‚ùå'}`);
                                if (exists) {
                                    const stats = fs.statSync(media.path);
                                    console.log(`         –†–∞–∑–º–µ—Ä: ${stats.size} –±–∞–π—Ç`);
                                    console.log(`         –ò–∑–º–µ–Ω–µ–Ω: ${stats.mtime.toISOString()}`);
                                }
                            }

                            if (media.url && media.url.startsWith('uploads/')) {
                                const uploadsPath = path.join(__dirname, '../uploads/images', path.basename(media.url));
                                const uploadsExists = fs.existsSync(uploadsPath);
                                console.log(`         –§–∞–π–ª –≤ uploads: ${uploadsExists ? '‚úÖ' : '‚ùå'}`);
                            }
                        }
                    }
                } catch (error) {
                    console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ newsData: ${error.message}`);
                }
            }

            console.log('\nüîç === –ü–†–û–í–ï–†–ö–ê –í–†–ï–ú–ï–ù–ù–´–• –§–ê–ô–õ–û–í ===');
            const tempDir = path.join(__dirname, '../temp');
            if (fs.existsSync(tempDir)) {
                const tempFiles = fs.readdirSync(tempDir);
                console.log(`üìÅ –í—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${tempFiles.length}`);
                
                tempFiles.forEach(file => {
                    if (file.startsWith('scheduled-')) {
                        const filePath = path.join(tempDir, file);
                        const stats = fs.statSync(filePath);
                        const ageHours = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60);
                        console.log(`   üìÑ ${file} (${Math.round(ageHours * 100)/100} —á–∞—Å–æ–≤)`);
                    }
                });
            } else {
                console.log('üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }

            console.log('\nüîç === –ü–†–û–í–ï–†–ö–ê UPLOADS ===');
            const uploadsDir = path.join(__dirname, '../uploads/images');
            if (fs.existsSync(uploadsDir)) {
                const uploadFiles = fs.readdirSync(uploadsDir).filter(f => 
                    f.startsWith('fallback-') || f.startsWith('scheduled-') || f.startsWith('images-')
                );
                console.log(`üìÅ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ uploads: ${uploadFiles.length}`);
                
                uploadFiles.slice(0, 10).forEach(file => {
                    const filePath = path.join(uploadsDir, file);
                    const stats = fs.statSync(filePath);
                    console.log(`   üì∑ ${file} (${stats.size} –±–∞–π—Ç)`);
                });
                
                if (uploadFiles.length > 10) {
                    console.log(`   ... –∏ –µ—â–µ ${uploadFiles.length - 10} —Ñ–∞–π–ª–æ–≤`);
                }
            } else {
                console.log('üìÅ –ü–∞–ø–∫–∞ uploads –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
        }
    }

    async checkSpecificNews(newsId) {
        try {
            const news = await ScheduledNews.findByPk(newsId);
            if (!news) {
                console.log(`‚ùå –ù–æ–≤–æ—Å—Ç—å —Å ID ${newsId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                return;
            }

            console.log(`üîç === –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ù–û–í–û–°–¢–ò ID: ${newsId} ===`);
            console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${news.title}`);
            console.log(`   –î–∞—Ç–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${news.scheduledDate}`);
            console.log(`   –í—Ä–µ–º—è –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${Math.round((new Date(news.scheduledDate) - new Date()) / 1000 / 60)} –º–∏–Ω—É—Ç`);

            const newsData = JSON.parse(news.newsData);
            console.log('üìã –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:', JSON.stringify(newsData, null, 2));

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
        }
    }
}

module.exports = new ScheduledNewsDebugger(); 