const { Client } = require('pg');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö POSTGRESQL ===\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log(`DB_HOST: ${process.env.DB_HOST}`);
console.log(`DB_PORT: ${process.env.DB_PORT}`);
console.log(`DB_USER: ${process.env.DB_USER}`);
console.log(`DB_NAME: ${process.env.DB_NAME}`);
console.log(`DB_PASSWORD: ${process.env.DB_PASSWORD ? '[–£–°–¢–ê–ù–û–í–õ–ï–ù]' : '[–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù]'}`);
console.log();

async function testConnection() {
    const client = new Client({
        host: process.env.DB_HOST,
        port: process.env.DB_PORT,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
        database: process.env.DB_NAME,
        connectionTimeoutMillis: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    try {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');

        const startTime = Date.now();
        await client.connect();
        const connectTime = Date.now() - startTime;

        console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! (${connectTime}ms)`);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        const result = await client.query('SELECT version(), current_database(), current_user');
        console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
        console.log(`–í–µ—Ä—Å–∏—è PostgreSQL: ${result.rows[0].version.split(' ')[1]}`);
        console.log(`–¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${result.rows[0].current_database}`);
        console.log(`–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.rows[0].current_user}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try {
            const diskResult = await client.query(`
                SELECT
                    schemaname,
                    tablename,
                    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size
                FROM pg_tables
                WHERE schemaname = 'public'
                ORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC
                LIMIT 5
            `);

            console.log('\nüìè –†–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü (—Ç–æ–ø-5):');
            diskResult.rows.forEach(row => {
                console.log(`${row.tablename}: ${row.size}`);
            });

        } catch (diskError) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–∞—Ö —Ç–∞–±–ª–∏—Ü');
        }

        await client.end();
        console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');

    } catch (error) {
        console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
        console.log(`–ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`);
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);

        if (error.code === 'ECONNREFUSED') {
            console.log('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('1. PostgreSQL —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
            console.log('2. –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç –∏–ª–∏ –ø–æ—Ä—Ç');
            console.log('3. Firewall –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        } else if (error.code === '42P01') {
            console.log('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('1. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            console.log('2. –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
        } else if (error.code === '28P01') {
            console.log('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('1. –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
            console.log('2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        } else if (error.message.includes('could not write init file')) {
            console.log('\nüîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ "could not write init file":');
            console.log('1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ PostgreSQL');
            console.log('2. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö PostgreSQL');
            console.log('3. –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã');
            console.log('4. –ü—Ä–æ–±–ª–µ–º—ã —Å SELinux/AppArmor');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞
        const { exec } = require('child_process');
        exec(`ping -c 3 ${process.env.DB_HOST}`, (pingError, stdout, stderr) => {
            if (pingError) {
                console.log('\n‚ùå –•–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ping');
            } else {
                console.log('\n‚úÖ –•–æ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ping');
            }

            console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é:');
            console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ PostgreSQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: sudo systemctl status postgresql');
            console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ PostgreSQL: sudo tail -f /var/log/postgresql/postgresql-*.log');
            console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: df -h');
            console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö PostgreSQL');
            console.log('5. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å PostgreSQL –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞');
        });

    }
}

testConnection();
