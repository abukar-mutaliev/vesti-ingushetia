require('dotenv').config();
const { sequelize, ScheduledNews } = require('./models');
const logger = require('./logger');

async function compareScheduledData() {
    try {
        await sequelize.authenticate();
        logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        const allScheduled = await ScheduledNews.findAll({
            order: [['createdAt', 'DESC']]
        });

        logger.info(`üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: ${allScheduled.length}`);

        allScheduled.forEach((news, index) => {
            logger.info(`\nüì∞ –ù–æ–≤–æ—Å—Ç—å ${index + 1}:`);
            logger.info(`   - ID: ${news.id}`);
            logger.info(`   - –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${news.title}"`);
            logger.info(`   - –°—Ç–∞—Ç—É—Å: ${news.status}`);
            logger.info(`   - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞: ${news.scheduledDate.toISOString()}`);
            logger.info(`   - –°–æ–∑–¥–∞–Ω–æ: ${news.createdAt.toISOString()}`);
            logger.info(`   - –ê–≤—Ç–æ—Ä ID: ${news.authorId}`);
            
            // –ü–∞—Ä—Å–∏–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º newsData
            try {
                const newsData = JSON.parse(news.newsData);
                logger.info(`   - newsData.title: "${newsData.title}"`);
                logger.info(`   - newsData.authorId: ${newsData.authorId}`);
                logger.info(`   - newsData.categoryIds: ${JSON.stringify(newsData.categoryIds)}`);
                logger.info(`   - newsData.publishDate: ${newsData.publishDate || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
                
                if (newsData.mediaFiles) {
                    logger.info(`   - mediaFiles: ${newsData.mediaFiles.length} —Ñ–∞–π–ª–æ–≤`);
                    newsData.mediaFiles.forEach((file, i) => {
                        logger.info(`     [${i}] type: ${file.type}, filename: ${file.filename || file.originalName || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
                    });
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                const createdTime = new Date(news.createdAt);
                const scheduledTime = new Date(news.scheduledDate);
                const diffMinutes = Math.round((scheduledTime - createdTime) / (1000 * 60));
                logger.info(`   - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑: ${diffMinutes} –º–∏–Ω—É—Ç –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                const now = new Date();
                const isReady = scheduledTime <= now;
                const minutesUntil = Math.round((scheduledTime - now) / (1000 * 60));
                logger.info(`   - –ì–æ—Ç–æ–≤–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${isReady ? '–î–ê' : `–ù–ï–¢ (—á–µ—Ä–µ–∑ ${minutesUntil} –º–∏–Ω)`}`);
                
            } catch (error) {
                logger.error(`   - ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ newsData: ${error.message}`);
                logger.info(`   - –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: ${news.newsData}`);
            }
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        const now = new Date();
        const readyToPublish = await ScheduledNews.findAll({
            where: {
                scheduledDate: {
                    [require('sequelize').Op.lte]: now
                },
                status: 'scheduled'
            }
        });

        logger.info(`\nüöÄ –ì–æ—Ç–æ–≤—ã—Ö –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–µ–π—á–∞—Å: ${readyToPublish.length}`);
        readyToPublish.forEach(news => {
            logger.info(`   - "${news.title}" (ID: ${news.id})`);
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        process.exit(1);
    }
}

compareScheduledData(); 