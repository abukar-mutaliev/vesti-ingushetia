const { sequelize, Media } = require('./models');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const uploadDir = process.env.UPLOAD_DIR || path.resolve(__dirname, '../uploads');

/**
 * –û—á–∏—Å—Ç–∫–∞ "—Å–∏—Ä–æ—Ç—Å–∫–∏—Ö" –∑–∞–ø–∏—Å–µ–π –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
 * –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î –æ —Ñ–∞–π–ª–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –Ω–∞ –¥–∏—Å–∫–µ
 */
async function cleanupOrphanedMedia() {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –º–µ–¥–∏–∞-–∑–∞–ø–∏—Å–µ–π...\n');

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –∑–∞–ø–∏—Å–∏
        const allMedia = await Media.findAll({
            attributes: ['id', 'url', 'type']
        });

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${allMedia.length} –º–µ–¥–∏–∞-–∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);

        let orphanedCount = 0;
        let checkedCount = 0;

        for (const media of allMedia) {
            checkedCount++;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            const fileExists = checkFileExists(media.url);

            if (!fileExists) {
                console.log(`üóëÔ∏è –ù–∞–π–¥–µ–Ω–∞ —Å–∏—Ä–æ—Ç—Å–∫–∞—è –∑–∞–ø–∏—Å—å: ID ${media.id}, URL: ${media.url}`);

                // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
                await Media.destroy({
                    where: { id: media.id }
                });

                orphanedCount++;
                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å–∏—Ä–æ—Ç—Å–∫–∞—è –∑–∞–ø–∏—Å—å ID ${media.id}`);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
            if (checkedCount % 10 === 0) {
                console.log(`üìà –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${checkedCount}/${allMedia.length} –∑–∞–ø–∏—Å–µ–π...`);
            }
        }

        console.log(`\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
        console.log(`üìä –£–¥–∞–ª–µ–Ω–æ ${orphanedCount} —Å–∏—Ä–æ—Ç—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error);
    } finally {
        await sequelize.close();
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω—ã–º –ø—É—Ç—è–º
 */
function checkFileExists(mediaUrl) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
    const filename = path.basename(mediaUrl);

    // –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    const possiblePaths = [
        path.join(uploadDir, 'images', filename),
        path.join(uploadDir, 'avatars', filename),
        path.join(uploadDir, 'videoAd', filename),
        path.join(uploadDir, 'audio', filename),
        path.join(__dirname, '../uploads/images', filename),
        path.join(__dirname, '../uploads/avatars', filename),
        path.join(__dirname, '../uploads/videoAd', filename),
        path.join(__dirname, '../uploads/audio', filename),
        // –î–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
        mediaUrl.startsWith('/') ? path.join(__dirname, '..', mediaUrl) : mediaUrl
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—É—Ç—å
    for (const filePath of possiblePaths) {
        try {
            if (fs.existsSync(filePath) && fs.statSync(filePath).isFile()) {
                return true;
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
            continue;
        }
    }

    return false;
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
if (require.main === module) {
    cleanupOrphanedMedia();
}

module.exports = { cleanupOrphanedMedia };
