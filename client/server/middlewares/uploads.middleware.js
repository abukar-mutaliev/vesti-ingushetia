const multer = require('multer');
const path = require('path');
const fs = require('fs');
const crypto = require('crypto');
require('dotenv').config();

const uploadDir = process.env.UPLOAD_DIR || 'uploads';
const avatarsDir = path.join(uploadDir, 'avatars');
const imagesDir = path.join(uploadDir, 'images');

[uploadDir, avatarsDir, imagesDir].forEach((dir) => {
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
    }
});

const maxAvatarSize = parseInt(process.env.MAX_AVATAR_SIZE || '5242880', 10); // 5 MB (—É–º–µ–Ω—å—à–µ–Ω–æ)
const maxImageSize = parseInt(process.env.MAX_IMAGE_SIZE || '10485760', 10); // 10 MB

// –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ MIME —Ç–∏–ø—ã (—É–±–∏—Ä–∞–µ–º GIF –∏ WebP)
const ALLOWED_MIME_TYPES = {
    'image/jpeg': 'jpg',
    'image/jpg': 'jpg',
    'image/png': 'png'
};

// –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ò—Å–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
const FORBIDDEN_EXTENSIONS = [
    'svg', 'xml', 'html', 'htm', 'js', 'php', 'asp', 'jsp', 'exe', 'bat', 'cmd',
    'gif', 'webp', 'bmp', 'tiff', 'ico' // –£–±–∏—Ä–∞–µ–º GIF, WebP –∏ –¥—Ä—É–≥–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ
];

// –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
const FILE_SIGNATURES = {
    'image/jpeg': [[0xFF, 0xD8, 0xFF]],
    'image/png': [[0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]]
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –ø–æ –º–∞–≥–∏—á–µ—Å–∫–∏–º –±–∞–π—Ç–∞–º
 */
const validateFileSignature = (buffer, mimeType) => {
    const signatures = FILE_SIGNATURES[mimeType];
    if (!signatures) return false;

    return signatures.some(signature => {
        if (buffer.length < signature.length) return false;
        return signature.every((byte, index) => buffer[index] === byte);
    });
};

/**
 * –°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ–≥–æ –∫–æ–¥–∞
 */
const scanFileContent = (buffer, filename) => {
    const content = buffer.toString('utf8', 0, Math.min(buffer.length, 1024));

    // –û–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const dangerousPatterns = [
        /<script/i,
        /javascript:/i,
        /vbscript:/i,
        /onload\s*=/i,
        /onerror\s*=/i,
        /onclick\s*=/i,
        /onmouseover\s*=/i,
        /<iframe/i,
        /<object/i,
        /<embed/i,
        /data:text\/html/i,
        /data:application\/javascript/i,
        /<svg.*onload/i,
        /<svg.*onerror/i,
        /<?php/i,
        /<\?=/i,
        /<%/i
    ];

    const foundPattern = dangerousPatterns.find(pattern => pattern.test(content));
    if (foundPattern) {
        console.error(`[SECURITY] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥ –≤ —Ñ–∞–π–ª–µ ${filename}:`, {
            pattern: foundPattern.toString(),
            timestamp: new Date().toISOString()
        });
        return false;
    }

    return true;
};

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 */
const generateSecureFilename = (originalName, fieldname) => {
    const ext = path.extname(originalName).toLowerCase();
    const timestamp = Date.now();
    const randomBytes = crypto.randomBytes(16).toString('hex');
    return `${fieldname}-${timestamp}-${randomBytes}${ext}`;
};

const fileDestination = (req, file, cb) => {
    const destMap = {
        avatar: avatarsDir,
        images: imagesDir,
    };

    const destination = destMap[file.fieldname];
    if (destination) {
        cb(null, destination);
    } else {
        cb(new Error('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—è —Ñ–∞–π–ª–∞'));
    }
};

const storage = multer.diskStorage({
    destination: fileDestination,
    filename: (req, file, cb) => {
        const secureFilename = generateSecureFilename(file.originalname, file.fieldname);
        cb(null, secureFilename);
    },
});

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
 */
const advancedFileFilter = (req, file, cb) => {
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME —Ç–∏–ø–∞
        if (!ALLOWED_MIME_TYPES[file.mimetype]) {
            return cb(new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π MIME —Ç–∏–ø: ${file.mimetype}. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: ${Object.keys(ALLOWED_MIME_TYPES).join(', ')}`));
        }

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        const ext = path.extname(file.originalname).toLowerCase().slice(1);
        const expectedExt = ALLOWED_MIME_TYPES[file.mimetype];

        if (ext !== expectedExt) {
            return cb(new Error(`–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è .${expectedExt}, –ø–æ–ª—É—á–µ–Ω–æ .${ext}`));
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        if (FORBIDDEN_EXTENSIONS.includes(ext)) {
            return cb(new Error(`–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: .${ext}`));
        }

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        const suspiciousFilenamePatterns = [
            /\.php\./i,
            /\.asp\./i,
            /\.jsp\./i,
            /\.js\./i,
            /\.html?\./i,
            /\.svg\./i,
            /\.\./,
            /[<>:"|?*]/,
            /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\.|$)/i
        ];

        if (suspiciousFilenamePatterns.some(pattern => pattern.test(file.originalname))) {
            return cb(new Error('–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞'));
        }

        // 5. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        const maxSize = file.fieldname === 'avatar' ? maxAvatarSize : maxImageSize;
        if (file.size > maxSize) {
            return cb(new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${Math.round(maxSize / 1024 / 1024)}MB`));
        }

        cb(null, true);
    } catch (error) {
        cb(new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`));
    }
};


/**
 * Middleware –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
 */
const postUploadValidation = async (req, res, next) => {
    try {
        if (!req.files && !req.file) {
            console.log('üìù –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return next();
        }

        const files = [];
        if (req.files) {
            Object.values(req.files).forEach(fileArray => {
                if (Array.isArray(fileArray)) {
                    files.push(...fileArray);
                } else {
                    files.push(fileArray);
                }
            });
        }
        if (req.file) {
            files.push(req.file);
        }

        console.log(`üîç –í–∞–ª–∏–¥–∞—Ü–∏—è ${files.length} —Ñ–∞–π–ª–æ–≤`);

        for (const file of files) {
            try {
                if (!fs.existsSync(file.path)) {
                    console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file.path}`);
                    return res.status(400).json({
                        error: `–§–∞–π–ª ${file.originalname} –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`
                    });
                }

                const buffer = fs.readFileSync(file.path);

                if (!validateFileSignature(buffer, file.mimetype)) {
                    console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞: ${file.originalname}`);
                    fs.unlinkSync(file.path);
                    return res.status(400).json({
                        error: `–§–∞–π–ª ${file.originalname} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—è–≤–ª–µ–Ω–Ω–æ–º—É —Ç–∏–ø—É`
                    });
                }

                if (!scanFileContent(buffer, file.originalname)) {
                    console.error(`‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥ –≤ —Ñ–∞–π–ª–µ: ${file.originalname}`);
                    fs.unlinkSync(file.path);
                    return res.status(400).json({
                        error: `–§–∞–π–ª ${file.originalname} —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–¥`
                    });
                }

                const stats = fs.statSync(file.path);
                const maxSize = file.fieldname === 'avatar' ? maxAvatarSize : maxImageSize;

                if (stats.size > maxSize) {
                    console.error(`‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${file.originalname} (${stats.size} bytes)`);
                    fs.unlinkSync(file.path);
                    return res.status(400).json({
                        error: `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${Math.round(stats.size / 1024 / 1024)}MB. –ú–∞–∫—Å–∏–º—É–º: ${Math.round(maxSize / 1024 / 1024)}MB`
                    });
                }

                console.log(`‚úÖ –§–∞–π–ª –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: ${file.originalname}`, {
                    fieldname: file.fieldname,
                    mimetype: file.mimetype,
                    size: stats.size,
                    path: file.path
                });

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ ${file.originalname}:`, error);

                if (fs.existsSync(file.path)) {
                    try {
                        fs.unlinkSync(file.path);
                        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${file.path}`);
                    } catch (unlinkError) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${unlinkError.message}`);
                    }
                }

                return res.status(400).json({
                    error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${file.originalname}: ${error.message}`
                });
            }
        }

        console.log(`‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é`);
        next();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ postUploadValidation:', error);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤' });
    }
};

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Multer —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
const handleMulterErrors = (err, req, res, next) => {
    if (err instanceof multer.MulterError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Multer:', {
            error: err.message,
            code: err.code,
            field: err.field,
            userId: req.user?.id,
            ip: req.ip,
            userAgent: req.get('User-Agent'),
            timestamp: new Date().toISOString(),
            requestPath: req.path,
            requestMethod: req.method
        });

        const errorMessages = {
            'LIMIT_FILE_SIZE': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
            'LIMIT_FILE_COUNT': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤',
            'LIMIT_FIELD_KEY': '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—è',
            'LIMIT_FIELD_VALUE': '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è',
            'LIMIT_FIELD_COUNT': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª–µ–π',
            'LIMIT_UNEXPECTED_FILE': '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª',
            'LIMIT_PART_COUNT': '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–∞—Å—Ç–µ–π'
        };

        const message = errorMessages[err.code] || `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${err.message}`;
        return res.status(400).json({
            error: message,
            code: err.code
        });

    } else if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', {
            error: err.message,
            stack: err.stack,
            userId: req.user?.id,
            ip: req.ip,
            timestamp: new Date().toISOString(),
            requestPath: req.path,
            requestMethod: req.method
        });

        return res.status(400).json({
            error: err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤'
        });
    }

    next();
};

/**
 * Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
 */
const logUploadAttempts = (req, res, next) => {
    const hasFiles = !!(req.files || req.file);

    if (hasFiles) {
        let fileInfo = {};

        if (req.files) {
            Object.keys(req.files).forEach(fieldname => {
                const files = req.files[fieldname];
                fileInfo[fieldname] = Array.isArray(files)
                    ? files.map(f => ({ name: f.originalname, size: f.size, type: f.mimetype }))
                    : [{ name: files.originalname, size: files.size, type: files.mimetype }];
            });
        }

        if (req.file) {
            fileInfo.single = {
                name: req.file.originalname,
                size: req.file.size,
                type: req.file.mimetype
            };
        }

        console.log('üì§ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', {
            userId: req.user?.id || 'anonymous',
            ip: req.ip,
            userAgent: req.get('User-Agent'),
            endpoint: req.path,
            method: req.method,
            files: fileInfo,
            timestamp: new Date().toISOString()
        });
    }

    next();
};

const uploadsMiddleware = multer({
    storage,
    limits: {
        fileSize: maxImageSize,
        files: 10,
        fields: 10,
        parts: 20
    },
    fileFilter: advancedFileFilter,
}).fields([
    { name: 'images', maxCount: 5 },
    { name: 'avatar', maxCount: 1 },
]);

const uploadWithValidation = (req, res, next) => {
    logUploadAttempts(req, res, () => {

        uploadsMiddleware(req, res, (uploadErr) => {
            if (uploadErr) {
                return handleMulterErrors(uploadErr, req, res, next);
            }

            postUploadValidation(req, res, next);
        });
    });
};

module.exports = {
    upload: uploadsMiddleware,
    uploadWithValidation,
    handleMulterErrors,
    postUploadValidation,
    logUploadAttempts,
    ALLOWED_MIME_TYPES,
    FORBIDDEN_EXTENSIONS
};