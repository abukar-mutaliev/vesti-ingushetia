require('dotenv').config();
const { sequelize, User, Category } = require('./models');
const logger = require('./logger');

async function checkUsers() {
    try {
        await sequelize.authenticate();
        logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±–µ–∑ –ø–æ–ª—è role, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç)
        const users = await User.findAll({
            attributes: ['id', 'username'],
            limit: 10
        });

        logger.info(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
        users.forEach(user => {
            logger.info(`   - ID: ${user.id}, –ò–º—è: ${user.username}`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const categories = await Category.findAll({
            attributes: ['id', 'name'],
            limit: 10
        });

        logger.info(`üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}`);
        categories.forEach(category => {
            logger.info(`   - ID: ${category.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${category.name}`);
        });

        if (users.length > 0 && categories.length > 0) {
            logger.info(`\nüéØ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:`);
            logger.info(`   - authorId: ${users[0].id} (${users[0].username})`);
            logger.info(`   - categoryId: ${categories[0].id} (${categories[0].name})`);
        }

        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã User
        const [results] = await sequelize.query(`
            SELECT column_name, data_type 
            FROM information_schema.columns 
            WHERE table_name = 'users'
            ORDER BY ordinal_position;
        `);
        
        logger.info(`\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:`);
        results.forEach(col => {
            logger.info(`   - ${col.column_name}: ${col.data_type}`);
        });

    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        process.exit(1);
    }
}

checkUsers(); 